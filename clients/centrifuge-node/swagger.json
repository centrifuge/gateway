{
  "swagger": "2.0",
  "info": {
    "description": "\n",
    "version": "0.0.3-alpha4",
    "title": "Centrifuge OS Node API",
    "contact": {
      "name": "Centrifuge",
      "url": "https://github.com/centrifuge/go-centrifuge",
      "email": "hello@centrifuge.io"
    }
  },
  "host": "localhost",
  "basePath": "",
  "tags": [],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "AccountService"
        ],
        "description": "Get All Accounts",
        "operationId": "GetAllAccounts",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/accountGetAllAccountResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AccountService"
        ],
        "description": "Creates an Account",
        "operationId": "CreateAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountAccountData"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/accountAccountData"
            }
          }
        }
      }
    },
    "/accounts/generate": {
      "post": {
        "tags": [
          "AccountService"
        ],
        "description": "Generates an Account taking defaults based on the main account",
        "operationId": "GenerateAccount",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/accountAccountData"
            }
          }
        }
      }
    },
    "/accounts/{identifier}": {
      "get": {
        "tags": [
          "AccountService"
        ],
        "description": "Get Account",
        "operationId": "GetAccount",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/accountAccountData"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountService"
        ],
        "description": "Updates an Account",
        "operationId": "UpdateAccount",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountUpdateAccountRequest"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/accountAccountData"
            }
          }
        }
      }
    },
    "/config": {
      "get": {
        "tags": [
          "ConfigService"
        ],
        "description": "Get Node Config",
        "operationId": "GetConfig",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/configConfigData"
            }
          }
        }
      }
    },
    "/document/{identifier}/proof": {
      "post": {
        "tags": [
          "DocumentService"
        ],
        "description": "Creates a list of precise proofs for the specified fields of the document given by ID",
        "operationId": "CreateDocumentProof",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/documentCreateDocumentProofRequest"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/documentDocumentProof"
            }
          }
        }
      }
    },
    "/document/{identifier}/{version}/proof": {
      "post": {
        "tags": [
          "DocumentService"
        ],
        "description": "Creates a list of precise proofs for the specified fields of the given version of the document given by ID",
        "operationId": "CreateDocumentProofForVersion",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/documentCreateDocumentProofForVersionRequest"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/documentDocumentProof"
            }
          }
        }
      }
    },
    "/entity": {
      "post": {
        "tags": [
          "EntityService"
        ],
        "description": "Creates an entity",
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityEntityCreatePayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityEntityResponse"
            }
          }
        }
      }
    },
    "/entity/{identifier}": {
      "get": {
        "tags": [
          "EntityService"
        ],
        "description": "Get the current entity",
        "operationId": "Get",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityEntityResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EntityService"
        ],
        "description": "Updates an entity",
        "operationId": "Update",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityEntityUpdatePayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityEntityResponse"
            }
          }
        }
      }
    },
    "/entity/{identifier}/revoke": {
      "post": {
        "tags": [
          "EntityService"
        ],
        "summary": "Entity Relation Revoke",
        "description": "revoke an entity document share",
        "operationId": "Revoke",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "entity identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityRelationshipPayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityEntityResponse"
            }
          }
        }
      }
    },
    "/entity/{identifier}/share": {
      "post": {
        "tags": [
          "EntityService"
        ],
        "summary": "Entity Relation Share",
        "description": "Share the entity document with others",
        "operationId": "Share",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "entity identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityRelationshipPayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityEntityResponse"
            }
          }
        }
      }
    },
    "/entity/{identifier}/{version}": {
      "get": {
        "tags": [
          "EntityService"
        ],
        "description": "Get a specific version of an entity",
        "operationId": "GetVersion",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityEntityResponse"
            }
          }
        }
      }
    },
    "/entity/{data.owner_identity}/share/{data.target_identity}": {
      "post": {
        "tags": [
          "EntityService"
        ],
        "description": "Creates an entity relationship",
        "operationId": "Share",
        "parameters": [
          {
            "name": "data.owner_identity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data.target_identity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityrelationshipEntityRelationshipCreatePayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityrelationshipEntityRelationshipResponse"
            }
          }
        }
      }
    },
    "/entity/{data.owner_identity}/{data.target_identity}": {
      "put": {
        "tags": [
          "EntityService"
        ],
        "description": "Revokes the access token for the target identity on the relevant entity relationship",
        "operationId": "Revoke",
        "parameters": [
          {
            "name": "data.owner_identity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data.target_identity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entityrelationshipEntityRelationshipUpdatePayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityrelationshipEntityRelationshipResponse"
            }
          }
        }
      }
    },
    "/entityrelationship/{owner_identity}": {
      "get": {
        "tags": [
          "EntityService"
        ],
        "description": "Get entity data",
        "operationId": "Get",
        "parameters": [
          {
            "name": "owner_identity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "target_identity",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/entityEntityData"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "HealthCheckService"
        ],
        "description": "Health check for the Node",
        "operationId": "Ping",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/healthPong"
            }
          }
        }
      }
    },
    "/invoice": {
      "post": {
        "tags": [
          "InvoiceService"
        ],
        "description": "Creates an invoice",
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/invoiceInvoiceCreatePayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/invoiceInvoiceResponse"
            }
          }
        }
      }
    },
    "/invoice/{identifier}": {
      "get": {
        "tags": [
          "InvoiceService"
        ],
        "description": "Get the current invoice",
        "operationId": "Get",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/invoiceInvoiceResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "InvoiceService"
        ],
        "description": "Updates an invoice",
        "operationId": "Update",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/invoiceInvoiceUpdatePayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/invoiceInvoiceResponse"
            }
          }
        }
      }
    },
    "/invoice/{identifier}/{version}": {
      "get": {
        "tags": [
          "InvoiceService"
        ],
        "description": "Get a specific version of an invoice",
        "operationId": "GetVersion",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/invoiceInvoiceResponse"
            }
          }
        }
      }
    },
    "/token/mint": {
      "post": {
        "tags": [
          "NFTService"
        ],
        "description": "Mint an NFT from a Centrifuge Document",
        "operationId": "MintNFT",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nftNFTMintRequest"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/nftNFTMintResponse"
            }
          }
        }
      }
    },
    "/token/mint/invoice/unpaid/{identifier}": {
      "post": {
        "tags": [
          "NFTService"
        ],
        "description": "Mints an NFT out of an Unpaid Centrifuge Invoice",
        "operationId": "MintInvoiceUnpaidNFT",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Invoice Document identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nftNFTMintInvoiceUnpaidRequest"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/nftNFTMintResponse"
            }
          }
        }
      }
    },
    "/dummy": {
      "get": {
        "tags": [
          "NotificationDummyService"
        ],
        "description": "Dummy notification endpoint",
        "operationId": "Notify",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/notificationNotificationMessage"
            }
          }
        }
      }
    },
    "/purchaseorder": {
      "post": {
        "tags": [
          "PurchaseOrderService"
        ],
        "description": "Creates a purchase order",
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/purchaseorderPurchaseOrderCreatePayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/purchaseorderPurchaseOrderResponse"
            }
          }
        }
      }
    },
    "/purchaseorder/{identifier}": {
      "get": {
        "tags": [
          "PurchaseOrderService"
        ],
        "description": "Get the current version of a purchase order",
        "operationId": "Get",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/purchaseorderPurchaseOrderResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PurchaseOrderService"
        ],
        "description": "Updates a purchase order",
        "operationId": "Update",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/purchaseorderPurchaseOrderUpdatePayload"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/purchaseorderPurchaseOrderResponse"
            }
          }
        }
      }
    },
    "/purchaseorder/{identifier}/{version}": {
      "get": {
        "tags": [
          "PurchaseOrderService"
        ],
        "description": "Get a specific version of a purchase order",
        "operationId": "GetVersion",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/purchaseorderPurchaseOrderResponse"
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}": {
      "get": {
        "tags": [
          "TransactionService"
        ],
        "description": "Get Transaction Status",
        "operationId": "GetTransactionStatus",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/transactionsTransactionStatusResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "accountAccountData": {
      "type": "object",
      "properties": {
        "eth_account": {
          "$ref": "#/definitions/accountEthereumAccount"
        },
        "eth_default_account_name": {
          "type": "string"
        },
        "receive_event_notification_endpoint": {
          "type": "string"
        },
        "identity_id": {
          "type": "string"
        },
        "signing_key_pair": {
          "$ref": "#/definitions/accountKeyPair"
        },
        "p2p_key_pair": {
          "$ref": "#/definitions/accountKeyPair"
        }
      }
    },
    "accountEthereumAccount": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "accountGetAllAccountResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accountAccountData"
          }
        }
      }
    },
    "accountKeyPair": {
      "type": "object",
      "properties": {
        "pub": {
          "type": "string"
        },
        "pvt": {
          "type": "string"
        }
      }
    },
    "accountUpdateAccountRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/accountAccountData"
        }
      }
    },
    "configConfigData": {
      "type": "object",
      "properties": {
        "storage_path": {
          "type": "string"
        },
        "p2p_port": {
          "type": "integer",
          "format": "int32"
        },
        "p2p_external_ip": {
          "type": "string"
        },
        "p2p_connection_timeout": {
          "type": "string"
        },
        "server_port": {
          "type": "integer",
          "format": "int32"
        },
        "server_address": {
          "type": "string"
        },
        "num_workers": {
          "type": "integer",
          "format": "int32"
        },
        "worker_wait_time_ms": {
          "type": "integer",
          "format": "int32"
        },
        "eth_node_url": {
          "type": "string"
        },
        "eth_context_read_wait_timeout": {
          "type": "string"
        },
        "eth_context_wait_timeout": {
          "type": "string"
        },
        "eth_interval_retry": {
          "type": "string"
        },
        "eth_max_retries": {
          "type": "integer",
          "format": "int64"
        },
        "eth_gas_price": {
          "type": "string",
          "format": "uint64"
        },
        "eth_gas_limit": {
          "type": "string",
          "format": "uint64"
        },
        "tx_pool_enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "network": {
          "type": "string"
        },
        "bootstrap_peers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "network_id": {
          "type": "integer",
          "format": "int64"
        },
        "main_identity": {
          "$ref": "#/definitions/accountAccountData"
        },
        "smart_contract_addresses": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "smart_contract_bytecode": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "pprof_enabled": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "documentCreateDocumentProofForVersionRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "documentCreateDocumentProofRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "documentDocumentProof": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/documentProofResponseHeader"
        },
        "field_proofs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/documentProof"
          }
        }
      }
    },
    "documentProof": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "salt": {
          "type": "string"
        },
        "hash": {
          "type": "string",
          "title": "hash is filled if value & salt are not available"
        },
        "sorted_hashes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "documentProofResponseHeader": {
      "type": "object",
      "properties": {
        "document_id": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "title": "ResponseHeader contains a set of common fields for most documents"
    },
    "documentReadAccess": {
      "type": "object",
      "properties": {
        "collaborators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "documentResponseHeader": {
      "type": "object",
      "properties": {
        "document_id": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "read_access": {
          "$ref": "#/definitions/documentReadAccess"
        },
        "write_access": {
          "$ref": "#/definitions/documentWriteAccess"
        },
        "transaction_id": {
          "type": "string"
        }
      }
    },
    "documentWriteAccess": {
      "type": "object",
      "properties": {
        "collaborators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "entityAddress": {
      "type": "object",
      "properties": {
        "is_main": {
          "type": "boolean",
          "format": "boolean"
        },
        "is_remit_to": {
          "type": "boolean",
          "format": "boolean"
        },
        "is_ship_to": {
          "type": "boolean",
          "format": "boolean"
        },
        "is_pay_to": {
          "type": "boolean",
          "format": "boolean"
        },
        "label": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "address_line1": {
          "type": "string"
        },
        "address_line2": {
          "type": "string"
        },
        "contact_person": {
          "type": "string"
        }
      }
    },
    "entityBankPaymentMethod": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "format": "byte",
          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "address": {
          "$ref": "#/definitions/entityAddress"
        },
        "holder_name": {
          "type": "string"
        },
        "bank_key": {
          "type": "string"
        },
        "bank_account_number": {
          "type": "string"
        },
        "supported_currency": {
          "type": "string"
        }
      }
    },
    "entityContact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        }
      }
    },
    "entityCryptoPaymentMethod": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "format": "byte",
          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "to": {
          "type": "string"
        },
        "chain_uri": {
          "type": "string"
        },
        "supported_currency": {
          "type": "string"
        }
      }
    },
    "entityEntityCreatePayload": {
      "type": "object",
      "properties": {
        "read_access": {
          "$ref": "#/definitions/documentReadAccess"
        },
        "write_access": {
          "$ref": "#/definitions/documentWriteAccess"
        },
        "data": {
          "$ref": "#/definitions/entityEntityData"
        }
      }
    },
    "entityEntityData": {
      "type": "object",
      "properties": {
        "identity": {
          "type": "string"
        },
        "legal_name": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "title": "address",
          "items": {
            "$ref": "#/definitions/entityAddress"
          }
        },
        "payment_details": {
          "type": "array",
          "title": "tax information",
          "items": {
            "$ref": "#/definitions/entityPaymentDetail"
          }
        },
        "contacts": {
          "type": "array",
          "title": "Entity contact list",
          "items": {
            "$ref": "#/definitions/entityContact"
          }
        }
      },
      "title": "EntityData is the default entity schema"
    },
    "entityEntityDataResponse": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/entityEntityData"
        },
        "relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entityRelationship"
          }
        }
      },
      "title": "Entity Relationships"
    },
    "entityEntityResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/documentResponseHeader"
        },
        "data": {
          "$ref": "#/definitions/entityEntityDataResponse"
        }
      }
    },
    "entityEntityUpdatePayload": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "read_access": {
          "$ref": "#/definitions/documentReadAccess"
        },
        "write_access": {
          "$ref": "#/definitions/documentWriteAccess"
        },
        "data": {
          "$ref": "#/definitions/entityEntityData"
        }
      }
    },
    "entityOtherPayment": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "format": "byte",
          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "type": {
          "type": "string"
        },
        "pay_to": {
          "type": "string"
        },
        "supported_currency": {
          "type": "string"
        }
      }
    },
    "entityPaymentDetail": {
      "type": "object",
      "properties": {
        "predefined": {
          "type": "boolean",
          "format": "boolean",
          "title": "fields for bank accounts and ethereum wallets"
        },
        "bank_payment_method": {
          "$ref": "#/definitions/entityBankPaymentMethod"
        },
        "crypto_payment_method": {
          "$ref": "#/definitions/entityCryptoPaymentMethod"
        },
        "other_method": {
          "$ref": "#/definitions/entityOtherPayment"
        }
      }
    },
    "entityRelationship": {
      "type": "object",
      "properties": {
        "identity": {
          "type": "string"
        },
        "active": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "entityRelationshipPayload": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "title": "entity identifier"
        },
        "target_identity": {
          "type": "string"
        }
      }
    },
    "coredocumentAction": {
      "type": "string",
      "description": "Action defines the set of actions a collaborator can/have per document.\n\n - ACTION_READ_SIGN: read_sign represents reading as well the sign the documents. We will pick this one when requesting the signatures.\n - ACTION_READ: read represents just reading the doc/fields",
      "enum": [
        "ACTION_INVALID",
        "ACTION_READ_SIGN",
        "ACTION_READ"
      ],
      "default": "ACTION_INVALID"
    },
    "coredocumentTransitionAction": {
      "type": "string",
      "enum": [
        "TRANSITION_ACTION_INVALID",
        "TRANSITION_ACTION_EDIT"
      ],
      "default": "TRANSITION_ACTION_INVALID"
    },
    "documentAccessToken": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "granter": {
          "type": "string"
        },
        "grantee": {
          "type": "string"
        },
        "document_identifier": {
          "type": "string"
        }
      }
    },
    "documentNFT": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "documentSignature": {
      "type": "object",
      "properties": {
        "identity": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "valid": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "entityrelationshipEntityRelationshipCreatePayload": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/entityrelationshipEntityRelationshipData"
        }
      },
      "title": "combine these two?"
    },
    "entityrelationshipEntityRelationshipData": {
      "type": "object",
      "properties": {
        "owner_identity": {
          "type": "string"
        },
        "target_identity": {
          "type": "string"
        }
      }
    },
    "entityrelationshipEntityRelationshipResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/documentResponseHeader"
        },
        "data": {
          "$ref": "#/definitions/entityrelationshipEntityRelationshipData"
        }
      }
    },
    "entityrelationshipEntityRelationshipUpdatePayload": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/entityrelationshipEntityRelationshipData"
        }
      }
    },
    "healthPong": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "network": {
          "type": "string"
        }
      },
      "title": "Pong contains basic information about the node"
    },
    "documentBinaryAttachment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "file_type": {
          "type": "string",
          "title": "mime type of attached file"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "title": "in bytes"
        },
        "data": {
          "type": "string"
        },
        "checksum": {
          "type": "string",
          "title": "the md5 checksum of the original file for easier verification - optional"
        }
      }
    },
    "documentPaymentDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "identifying this payment. could be a sequential number, could be a transaction hash of the crypto payment"
        },
        "date_executed": {
          "type": "string",
          "format": "date-time"
        },
        "payee": {
          "type": "string",
          "title": "centrifuge id of payee"
        },
        "payer": {
          "type": "string",
          "title": "centrifuge id of payer"
        },
        "amount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "reference": {
          "type": "string",
          "title": "payment reference (e.g. reference field on bank transfer)"
        },
        "bank_name": {
          "type": "string"
        },
        "bank_address": {
          "type": "string"
        },
        "bank_country": {
          "type": "string"
        },
        "bank_account_number": {
          "type": "string"
        },
        "bank_account_currency": {
          "type": "string"
        },
        "bank_account_holder_name": {
          "type": "string"
        },
        "bank_key": {
          "type": "string"
        },
        "crypto_chain_uri": {
          "type": "string",
          "title": "the ID of the chain to use in URI format. e.g. \"ethereum://42/<tokenaddress>\""
        },
        "crypto_transaction_id": {
          "type": "string",
          "title": "the transaction in which the payment happened"
        },
        "crypto_from": {
          "type": "string",
          "title": "from address"
        },
        "crypto_to": {
          "type": "string",
          "title": "to address"
        }
      }
    },
    "invoiceInvoiceCreatePayload": {
      "type": "object",
      "properties": {
        "read_access": {
          "$ref": "#/definitions/documentReadAccess"
        },
        "write_access": {
          "$ref": "#/definitions/documentWriteAccess"
        },
        "data": {
          "$ref": "#/definitions/invoiceInvoiceData"
        }
      }
    },
    "invoiceInvoiceData": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "title": "invoice number or reference number"
        },
        "status": {
          "type": "string",
          "title": "invoice status"
        },
        "sender_invoice_id": {
          "type": "string"
        },
        "recipient_invoice_id": {
          "type": "string"
        },
        "sender_company_name": {
          "type": "string"
        },
        "sender_contact_person_name": {
          "type": "string"
        },
        "sender_street1": {
          "type": "string",
          "title": "street and address details of the sender company"
        },
        "sender_street2": {
          "type": "string"
        },
        "sender_city": {
          "type": "string"
        },
        "sender_zipcode": {
          "type": "string"
        },
        "sender_state": {
          "type": "string"
        },
        "sender_country": {
          "type": "string",
          "title": "country ISO code of the sender of this invoice"
        },
        "bill_to_company_name": {
          "type": "string"
        },
        "bill_to_contact_person_name": {
          "type": "string"
        },
        "bill_to_street1": {
          "type": "string"
        },
        "bill_to_street2": {
          "type": "string"
        },
        "bill_to_city": {
          "type": "string"
        },
        "bill_to_zipcode": {
          "type": "string"
        },
        "bill_to_state": {
          "type": "string"
        },
        "bill_to_country": {
          "type": "string"
        },
        "bill_to_vat_number": {
          "type": "string"
        },
        "bill_to_local_tax_id": {
          "type": "string"
        },
        "remit_to_company_name": {
          "type": "string"
        },
        "remit_to_contact_person_name": {
          "type": "string"
        },
        "remit_to_street1": {
          "type": "string"
        },
        "remit_to_street2": {
          "type": "string"
        },
        "remit_to_city": {
          "type": "string"
        },
        "remit_to_zipcode": {
          "type": "string"
        },
        "remit_to_state": {
          "type": "string"
        },
        "remit_to_country": {
          "type": "string"
        },
        "remit_to_vat_number": {
          "type": "string"
        },
        "remit_to_local_tax_id": {
          "type": "string"
        },
        "remit_to_tax_country": {
          "type": "string"
        },
        "ship_to_company_name": {
          "type": "string"
        },
        "ship_to_contact_person_name": {
          "type": "string"
        },
        "ship_to_street1": {
          "type": "string"
        },
        "ship_to_street2": {
          "type": "string"
        },
        "ship_to_city": {
          "type": "string"
        },
        "ship_to_zipcode": {
          "type": "string"
        },
        "ship_to_state": {
          "type": "string"
        },
        "ship_to_country": {
          "type": "string"
        },
        "currency": {
          "type": "string",
          "title": "ISO currency code"
        },
        "gross_amount": {
          "type": "string",
          "title": "invoice amount including tax"
        },
        "net_amount": {
          "type": "string",
          "title": "invoice amount excluding tax"
        },
        "tax_amount": {
          "type": "string"
        },
        "tax_rate": {
          "type": "string"
        },
        "tax_on_line_level": {
          "type": "boolean",
          "format": "boolean"
        },
        "recipient": {
          "type": "string",
          "title": "centrifuge ID of the recipient"
        },
        "sender": {
          "type": "string",
          "title": "centrifuge ID of the sender"
        },
        "payee": {
          "type": "string",
          "title": "centrifuge ID of the payee"
        },
        "comment": {
          "type": "string"
        },
        "shipping_terms": {
          "type": "string"
        },
        "requester_email": {
          "type": "string"
        },
        "requester_name": {
          "type": "string"
        },
        "delivery_number": {
          "type": "string",
          "title": "number of the delivery note"
        },
        "is_credit_note": {
          "type": "boolean",
          "format": "boolean"
        },
        "credit_note_invoice_number": {
          "type": "string"
        },
        "credit_for_invoice_date": {
          "type": "string",
          "format": "date-time"
        },
        "date_due": {
          "type": "string",
          "format": "date-time"
        },
        "date_paid": {
          "type": "string",
          "format": "date-time"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time"
        },
        "date_created": {
          "type": "string",
          "format": "date-time"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/documentBinaryAttachment"
          }
        },
        "line_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/invoiceLineItem"
          }
        },
        "payment_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/documentPaymentDetails"
          }
        },
        "tax_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/invoiceTaxItem"
          }
        }
      },
      "title": "InvoiceData is the default invoice schema"
    },
    "invoiceInvoiceResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/documentResponseHeader"
        },
        "data": {
          "$ref": "#/definitions/invoiceInvoiceData"
        }
      }
    },
    "invoiceInvoiceUpdatePayload": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "read_access": {
          "$ref": "#/definitions/documentReadAccess"
        },
        "write_access": {
          "$ref": "#/definitions/documentWriteAccess"
        },
        "data": {
          "$ref": "#/definitions/invoiceInvoiceData"
        }
      }
    },
    "invoiceLineItem": {
      "type": "object",
      "properties": {
        "item_number": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "sender_part_no": {
          "type": "string"
        },
        "price_per_unit": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "unit_of_measure": {
          "type": "string"
        },
        "net_weight": {
          "type": "string"
        },
        "tax_amount": {
          "type": "string"
        },
        "tax_rate": {
          "type": "string"
        },
        "tax_code": {
          "type": "string"
        },
        "total_amount": {
          "type": "string",
          "title": "the total amount of the line item"
        },
        "purchase_order_number": {
          "type": "string"
        },
        "purchase_order_item_number": {
          "type": "string"
        },
        "delivery_note_number": {
          "type": "string"
        }
      }
    },
    "invoiceTaxItem": {
      "type": "object",
      "properties": {
        "item_number": {
          "type": "string"
        },
        "invoice_item_number": {
          "type": "string"
        },
        "tax_amount": {
          "type": "string"
        },
        "tax_rate": {
          "type": "string"
        },
        "tax_code": {
          "type": "string"
        },
        "tax_base_amount": {
          "type": "string"
        }
      }
    },
    "nftNFTMintInvoiceUnpaidRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "title": "Invoice Document identifier"
        },
        "deposit_address": {
          "type": "string",
          "title": "Deposit address for NFT Token created"
        }
      }
    },
    "nftNFTMintRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "title": "Document identifier"
        },
        "registry_address": {
          "type": "string",
          "title": "The contract address of the registry where the token should be minted"
        },
        "deposit_address": {
          "type": "string"
        },
        "proof_fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "submit_token_proof": {
          "type": "boolean",
          "format": "boolean",
          "title": "proof that nft is part of document"
        },
        "submit_nft_owner_access_proof": {
          "type": "boolean",
          "format": "boolean",
          "title": "proof that nft owner can access the document if nft_grant_access is true"
        },
        "grant_nft_access": {
          "type": "boolean",
          "format": "boolean",
          "title": "grant nft read access to the document"
        }
      }
    },
    "nftNFTMintResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/nftResponseHeader"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "nftResponseHeader": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string"
        }
      }
    },
    "notificationNotificationMessage": {
      "type": "object",
      "properties": {
        "event_type": {
          "type": "integer",
          "format": "int64"
        },
        "recorded": {
          "type": "string",
          "format": "date-time"
        },
        "document_type": {
          "type": "string"
        },
        "document_id": {
          "type": "string"
        },
        "account_id": {
          "type": "string",
          "title": "account_id is the account associated to webhook"
        },
        "from_id": {
          "type": "string",
          "title": "from_id if provided, original trigger of the event"
        },
        "to_id": {
          "type": "string",
          "title": "to_id if provided, final destination of the event"
        }
      },
      "title": "NotificationMessage wraps a single CoreDocument to be notified to upstream services"
    },
    "purchaseorderLineItem": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "item_number": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "amount_invoiced": {
          "type": "string"
        },
        "amount_total": {
          "type": "string"
        },
        "requisition_number": {
          "type": "string"
        },
        "requisition_item": {
          "type": "string"
        },
        "part_no": {
          "type": "string"
        },
        "price_per_unit": {
          "type": "string"
        },
        "unit_of_measure": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "received_quantity": {
          "type": "string"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time"
        },
        "date_created": {
          "type": "string",
          "format": "date-time"
        },
        "revision_number": {
          "type": "string",
          "format": "int64"
        },
        "activities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/purchaseorderLineItemActivity"
          }
        },
        "tax_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/purchaseorderTaxItem"
          }
        }
      }
    },
    "purchaseorderLineItemActivity": {
      "type": "object",
      "properties": {
        "item_number": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "delivered, returned, credited, invoiced, paid, ..."
        },
        "quantity": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "reference_document_id": {
          "type": "string",
          "description": "depending on status delivery note, invoice, ..."
        },
        "reference_document_item": {
          "type": "string",
          "title": "line item from the reference document"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "purchaseorderPurchaseOrderCreatePayload": {
      "type": "object",
      "properties": {
        "read_access": {
          "$ref": "#/definitions/documentReadAccess"
        },
        "write_access": {
          "$ref": "#/definitions/documentWriteAccess"
        },
        "data": {
          "$ref": "#/definitions/purchaseorderPurchaseOrderData"
        }
      }
    },
    "purchaseorderPurchaseOrderData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "number": {
          "type": "string",
          "title": "purchase order number or reference number"
        },
        "sender_order_id": {
          "type": "string"
        },
        "recipient_order_id": {
          "type": "string"
        },
        "requisition_id": {
          "type": "string"
        },
        "requester_name": {
          "type": "string"
        },
        "requester_email": {
          "type": "string"
        },
        "ship_to_company_name": {
          "type": "string"
        },
        "ship_to_contact_person_name": {
          "type": "string"
        },
        "ship_to_street1": {
          "type": "string"
        },
        "ship_to_street2": {
          "type": "string"
        },
        "ship_to_city": {
          "type": "string"
        },
        "ship_to_zipcode": {
          "type": "string"
        },
        "ship_to_state": {
          "type": "string"
        },
        "ship_to_country": {
          "type": "string"
        },
        "payment_terms": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "total_amount": {
          "type": "string"
        },
        "recipient": {
          "type": "string",
          "title": "centrifuge ID of the recipient"
        },
        "sender": {
          "type": "string",
          "title": "centrifuge ID of the sender"
        },
        "comment": {
          "type": "string"
        },
        "date_sent": {
          "type": "string",
          "format": "date-time"
        },
        "date_confirmed": {
          "type": "string",
          "format": "date-time"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time"
        },
        "date_created": {
          "type": "string",
          "format": "date-time"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/documentBinaryAttachment"
          }
        },
        "line_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/purchaseorderLineItem"
          }
        },
        "payment_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/documentPaymentDetails"
          }
        }
      }
    },
    "purchaseorderPurchaseOrderResponse": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/documentResponseHeader"
        },
        "data": {
          "$ref": "#/definitions/purchaseorderPurchaseOrderData"
        }
      }
    },
    "purchaseorderPurchaseOrderUpdatePayload": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "read_access": {
          "$ref": "#/definitions/documentReadAccess"
        },
        "write_access": {
          "$ref": "#/definitions/documentWriteAccess"
        },
        "data": {
          "$ref": "#/definitions/purchaseorderPurchaseOrderData"
        }
      }
    },
    "purchaseorderTaxItem": {
      "type": "object",
      "properties": {
        "item_number": {
          "type": "string"
        },
        "purchase_order_item_number": {
          "type": "string"
        },
        "tax_amount": {
          "type": "string"
        },
        "tax_rate": {
          "type": "string"
        },
        "tax_code": {
          "type": "string"
        },
        "tax_base_amount": {
          "type": "string"
        }
      }
    },
    "transactionsTransactionStatusResponse": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "last_updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}
