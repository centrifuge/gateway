/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Centrifuge OS Node API
 *  
 *
 * OpenAPI spec version: 0.0.5
 * Contact: hello@centrifuge.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8082".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountAccountData
 */
export interface AccountAccountData {
    /**
     * 
     * @type {AccountEthereumAccount}
     * @memberof AccountAccountData
     */
    eth_account?: AccountEthereumAccount;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    eth_default_account_name?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    receive_event_notification_endpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    identity_id?: string;
    /**
     * 
     * @type {AccountKeyPair}
     * @memberof AccountAccountData
     */
    signing_key_pair?: AccountKeyPair;
    /**
     * 
     * @type {AccountKeyPair}
     * @memberof AccountAccountData
     */
    p2p_key_pair?: AccountKeyPair;
}

/**
 * 
 * @export
 * @interface AccountEthereumAccount
 */
export interface AccountEthereumAccount {
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface AccountGetAllAccountResponse
 */
export interface AccountGetAllAccountResponse {
    /**
     * 
     * @type {Array<AccountAccountData>}
     * @memberof AccountGetAllAccountResponse
     */
    data?: Array<AccountAccountData>;
}

/**
 * 
 * @export
 * @interface AccountKeyPair
 */
export interface AccountKeyPair {
    /**
     * 
     * @type {string}
     * @memberof AccountKeyPair
     */
    pub?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountKeyPair
     */
    pvt?: string;
}

/**
 * 
 * @export
 * @interface AccountUpdateAccountRequest
 */
export interface AccountUpdateAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateAccountRequest
     */
    identifier?: string;
    /**
     * 
     * @type {AccountAccountData}
     * @memberof AccountUpdateAccountRequest
     */
    data?: AccountAccountData;
}

/**
 * 
 * @export
 * @interface ByteutilsHexBytes
 */
export interface ByteutilsHexBytes extends Array<any> {
}

/**
 * 
 * @export
 * @interface CoreapiAttribute
 */
export interface CoreapiAttribute {
    /**
     * 
     * @type {string}
     * @memberof CoreapiAttribute
     */
    type?: CoreapiAttribute.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CoreapiAttribute
     */
    value?: string;
}

/**
 * @export
 * @namespace CoreapiAttribute
 */
export namespace CoreapiAttribute {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Integer = <any> 'integer',
        Decimal = <any> 'decimal',
        String = <any> 'string',
        Bytes = <any> 'bytes',
        Timestamp = <any> 'timestamp'
    }
}

/**
 * 
 * @export
 * @interface CoreapiAttributeMap
 */
export interface CoreapiAttributeMap {
    [key: string]: any;

}

/**
 * 
 * @export
 * @interface CoreapiCreateDocumentRequest
 */
export interface CoreapiCreateDocumentRequest {
    /**
     * 
     * @type {CoreapiAttributeMap}
     * @memberof CoreapiCreateDocumentRequest
     */
    attributes?: CoreapiAttributeMap;
    /**
     * 
     * @type {any}
     * @memberof CoreapiCreateDocumentRequest
     */
    data?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreapiCreateDocumentRequest
     */
    read_access?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CoreapiCreateDocumentRequest
     */
    scheme?: CoreapiCreateDocumentRequest.SchemeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreapiCreateDocumentRequest
     */
    write_access?: Array<string>;
}

/**
 * @export
 * @namespace CoreapiCreateDocumentRequest
 */
export namespace CoreapiCreateDocumentRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum SchemeEnum {
        Invoice = <any> 'invoice'
    }
}

/**
 * 
 * @export
 * @interface CoreapiDocumentResponse
 */
export interface CoreapiDocumentResponse {
    /**
     * 
     * @type {CoreapiAttributeMap}
     * @memberof CoreapiDocumentResponse
     */
    attributes?: CoreapiAttributeMap;
    /**
     * 
     * @type {any}
     * @memberof CoreapiDocumentResponse
     */
    data?: any;
    /**
     * 
     * @type {CoreapiResponseHeader}
     * @memberof CoreapiDocumentResponse
     */
    header?: CoreapiResponseHeader;
}

/**
 * 
 * @export
 * @interface CoreapiNFT
 */
export interface CoreapiNFT {
    /**
     * 
     * @type {string}
     * @memberof CoreapiNFT
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof CoreapiNFT
     */
    registry?: string;
    /**
     * 
     * @type {string}
     * @memberof CoreapiNFT
     */
    token_id?: string;
    /**
     * 
     * @type {string}
     * @memberof CoreapiNFT
     */
    token_index?: string;
}

/**
 * 
 * @export
 * @interface CoreapiResponseHeader
 */
export interface CoreapiResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof CoreapiResponseHeader
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof CoreapiResponseHeader
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof CoreapiResponseHeader
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof CoreapiResponseHeader
     */
    job_id?: string;
    /**
     * 
     * @type {Array<CoreapiNFT>}
     * @memberof CoreapiResponseHeader
     */
    nfts?: Array<CoreapiNFT>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreapiResponseHeader
     */
    read_access?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CoreapiResponseHeader
     */
    version?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreapiResponseHeader
     */
    write_access?: Array<string>;
}

/**
 * 
 * @export
 * @interface CoreapiUpdateDocumentRequest
 */
export interface CoreapiUpdateDocumentRequest {
    /**
     * 
     * @type {CoreapiAttributeMap}
     * @memberof CoreapiUpdateDocumentRequest
     */
    attributes?: CoreapiAttributeMap;
    /**
     * 
     * @type {any}
     * @memberof CoreapiUpdateDocumentRequest
     */
    data?: any;
    /**
     * 
     * @type {string}
     * @memberof CoreapiUpdateDocumentRequest
     */
    document_id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreapiUpdateDocumentRequest
     */
    read_access?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CoreapiUpdateDocumentRequest
     */
    scheme?: CoreapiUpdateDocumentRequest.SchemeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreapiUpdateDocumentRequest
     */
    write_access?: Array<string>;
}

/**
 * @export
 * @namespace CoreapiUpdateDocumentRequest
 */
export namespace CoreapiUpdateDocumentRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum SchemeEnum {
        Invoice = <any> 'invoice'
    }
}

/**
 * 
 * @export
 * @interface DocumentAttribute
 */
export interface DocumentAttribute {
    /**
     * 
     * @type {string}
     * @memberof DocumentAttribute
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentAttribute
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentAttribute
     */
    value?: string;
}

/**
 * 
 * @export
 * @interface DocumentBinaryAttachment
 */
export interface DocumentBinaryAttachment {
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    file_type?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    size?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    data?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    checksum?: string;
}

/**
 * 
 * @export
 * @interface DocumentCreateDocumentProofForVersionRequest
 */
export interface DocumentCreateDocumentProofForVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    version?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentCreateDocumentProofRequest
 */
export interface DocumentCreateDocumentProofRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofRequest
     */
    type?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentCreateDocumentProofRequest
     */
    fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentDocumentProof
 */
export interface DocumentDocumentProof {
    /**
     * 
     * @type {DocumentProofResponseHeader}
     * @memberof DocumentDocumentProof
     */
    header?: DocumentProofResponseHeader;
    /**
     * 
     * @type {Array<DocumentProof>}
     * @memberof DocumentDocumentProof
     */
    field_proofs?: Array<DocumentProof>;
}

/**
 * 
 * @export
 * @interface DocumentNFT
 */
export interface DocumentNFT {
    /**
     * 
     * @type {string}
     * @memberof DocumentNFT
     */
    registry?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentNFT
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentNFT
     */
    token_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentNFT
     */
    token_index?: string;
}

/**
 * 
 * @export
 * @interface DocumentPaymentDetails
 */
export interface DocumentPaymentDetails {
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof DocumentPaymentDetails
     */
    date_executed?: Date;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    payee?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    payer?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    reference?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_name?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_address?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_country?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_account_number?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_account_currency?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_account_holder_name?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_key?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    crypto_chain_uri?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    crypto_transaction_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    crypto_from?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    crypto_to?: string;
}

/**
 * 
 * @export
 * @interface DocumentProof
 */
export interface DocumentProof {
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    property?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    salt?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    hash?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentProof
     */
    sorted_hashes?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentProofResponseHeader
 */
export interface DocumentProofResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof DocumentProofResponseHeader
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProofResponseHeader
     */
    version_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProofResponseHeader
     */
    state?: string;
}

/**
 * 
 * @export
 * @interface DocumentReadAccess
 */
export interface DocumentReadAccess {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentReadAccess
     */
    collaborators?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentResponseHeader
 */
export interface DocumentResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    created_at?: string;
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof DocumentResponseHeader
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof DocumentResponseHeader
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    job_id?: string;
    /**
     * 
     * @type {Array<DocumentNFT>}
     * @memberof DocumentResponseHeader
     */
    nfts?: Array<DocumentNFT>;
}

/**
 * 
 * @export
 * @interface DocumentWriteAccess
 */
export interface DocumentWriteAccess {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentWriteAccess
     */
    collaborators?: Array<string>;
}

/**
 * 
 * @export
 * @interface EntityAddress
 */
export interface EntityAddress {
    /**
     * 
     * @type {boolean}
     * @memberof EntityAddress
     */
    is_main?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntityAddress
     */
    is_remit_to?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntityAddress
     */
    is_ship_to?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntityAddress
     */
    is_pay_to?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    address_line1?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    address_line2?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    contact_person?: string;
}

/**
 * 
 * @export
 * @interface EntityBankPaymentMethod
 */
export interface EntityBankPaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    identifier?: string;
    /**
     * 
     * @type {EntityAddress}
     * @memberof EntityBankPaymentMethod
     */
    address?: EntityAddress;
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    holder_name?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    bank_key?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    bank_account_number?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    supported_currency?: string;
}

/**
 * 
 * @export
 * @interface EntityContact
 */
export interface EntityContact {
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    fax?: string;
}

/**
 * 
 * @export
 * @interface EntityCryptoPaymentMethod
 */
export interface EntityCryptoPaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof EntityCryptoPaymentMethod
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityCryptoPaymentMethod
     */
    to?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityCryptoPaymentMethod
     */
    chain_uri?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityCryptoPaymentMethod
     */
    supported_currency?: string;
}

/**
 * 
 * @export
 * @interface EntityEntityCreatePayload
 */
export interface EntityEntityCreatePayload {
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof EntityEntityCreatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof EntityEntityCreatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {EntityEntityData}
     * @memberof EntityEntityCreatePayload
     */
    data?: EntityEntityData;
}

/**
 * 
 * @export
 * @interface EntityEntityData
 */
export interface EntityEntityData {
    /**
     * 
     * @type {string}
     * @memberof EntityEntityData
     */
    identity?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityEntityData
     */
    legal_name?: string;
    /**
     * 
     * @type {Array<EntityAddress>}
     * @memberof EntityEntityData
     */
    addresses?: Array<EntityAddress>;
    /**
     * 
     * @type {Array<EntityPaymentDetail>}
     * @memberof EntityEntityData
     */
    payment_details?: Array<EntityPaymentDetail>;
    /**
     * 
     * @type {Array<EntityContact>}
     * @memberof EntityEntityData
     */
    contacts?: Array<EntityContact>;
    /**
     * 
     * @type {{ [key: string]: DocumentAttribute; }}
     * @memberof EntityEntityData
     */
    attributes?: { [key: string]: DocumentAttribute; };
}

/**
 * 
 * @export
 * @interface EntityEntityDataResponse
 */
export interface EntityEntityDataResponse {
    /**
     * 
     * @type {EntityEntityData}
     * @memberof EntityEntityDataResponse
     */
    entity?: EntityEntityData;
    /**
     * 
     * @type {Array<EntityRelationship>}
     * @memberof EntityEntityDataResponse
     */
    relationships?: Array<EntityRelationship>;
}

/**
 * 
 * @export
 * @interface EntityEntityResponse
 */
export interface EntityEntityResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof EntityEntityResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {EntityEntityDataResponse}
     * @memberof EntityEntityResponse
     */
    data?: EntityEntityDataResponse;
}

/**
 * 
 * @export
 * @interface EntityEntityUpdatePayload
 */
export interface EntityEntityUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof EntityEntityUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof EntityEntityUpdatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof EntityEntityUpdatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {EntityEntityData}
     * @memberof EntityEntityUpdatePayload
     */
    data?: EntityEntityData;
}

/**
 * 
 * @export
 * @interface EntityOtherPayment
 */
export interface EntityOtherPayment {
    /**
     * 
     * @type {string}
     * @memberof EntityOtherPayment
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityOtherPayment
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityOtherPayment
     */
    pay_to?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityOtherPayment
     */
    supported_currency?: string;
}

/**
 * 
 * @export
 * @interface EntityPaymentDetail
 */
export interface EntityPaymentDetail {
    /**
     * 
     * @type {boolean}
     * @memberof EntityPaymentDetail
     */
    predefined?: boolean;
    /**
     * 
     * @type {EntityBankPaymentMethod}
     * @memberof EntityPaymentDetail
     */
    bank_payment_method?: EntityBankPaymentMethod;
    /**
     * 
     * @type {EntityCryptoPaymentMethod}
     * @memberof EntityPaymentDetail
     */
    crypto_payment_method?: EntityCryptoPaymentMethod;
    /**
     * 
     * @type {EntityOtherPayment}
     * @memberof EntityPaymentDetail
     */
    other_method?: EntityOtherPayment;
}

/**
 * 
 * @export
 * @interface EntityRelationship
 */
export interface EntityRelationship {
    /**
     * 
     * @type {string}
     * @memberof EntityRelationship
     */
    identity?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EntityRelationship
     */
    active?: boolean;
}

/**
 * 
 * @export
 * @interface EntityRelationshipData
 */
export interface EntityRelationshipData {
    /**
     * 
     * @type {string}
     * @memberof EntityRelationshipData
     */
    owner_identity?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityRelationshipData
     */
    target_identity?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityRelationshipData
     */
    entity_identifier?: string;
}

/**
 * 
 * @export
 * @interface EntityRelationshipPayload
 */
export interface EntityRelationshipPayload {
    /**
     * 
     * @type {string}
     * @memberof EntityRelationshipPayload
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityRelationshipPayload
     */
    target_identity?: string;
}

/**
 * 
 * @export
 * @interface EntityRelationshipResponse
 */
export interface EntityRelationshipResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof EntityRelationshipResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {Array<EntityRelationshipData>}
     * @memberof EntityRelationshipResponse
     */
    relationship?: Array<EntityRelationshipData>;
}

/**
 * 
 * @export
 * @interface FunFundingCreatePayload
 */
export interface FunFundingCreatePayload {
    /**
     * 
     * @type {string}
     * @memberof FunFundingCreatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {FunFundingData}
     * @memberof FunFundingCreatePayload
     */
    data?: FunFundingData;
}

/**
 * 
 * @export
 * @interface FunFundingData
 */
export interface FunFundingData {
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    agreement_id?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    apr?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    days?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    fee?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    repayment_due_date?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    repayment_occurred_date?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    repayment_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    nft_address?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    payment_details_id?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    funder_id?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingData
     */
    borrower_id?: string;
}

/**
 * 
 * @export
 * @interface FunFundingListResponse
 */
export interface FunFundingListResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof FunFundingListResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {Array<FunFundingResponseData>}
     * @memberof FunFundingListResponse
     */
    data?: Array<FunFundingResponseData>;
}

/**
 * 
 * @export
 * @interface FunFundingResponse
 */
export interface FunFundingResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof FunFundingResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {FunFundingResponseData}
     * @memberof FunFundingResponse
     */
    data?: FunFundingResponseData;
}

/**
 * 
 * @export
 * @interface FunFundingResponseData
 */
export interface FunFundingResponseData {
    /**
     * 
     * @type {FunFundingData}
     * @memberof FunFundingResponseData
     */
    funding?: FunFundingData;
    /**
     * 
     * @type {Array<FunFundingSignature>}
     * @memberof FunFundingResponseData
     */
    signatures?: Array<FunFundingSignature>;
}

/**
 * 
 * @export
 * @interface FunFundingSignature
 */
export interface FunFundingSignature {
    /**
     * 
     * @type {string}
     * @memberof FunFundingSignature
     */
    valid?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingSignature
     */
    outdated_signature?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingSignature
     */
    identity?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingSignature
     */
    signed_version?: string;
}

/**
 * 
 * @export
 * @interface FunFundingUpdatePayload
 */
export interface FunFundingUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof FunFundingUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof FunFundingUpdatePayload
     */
    agreement_id?: string;
    /**
     * 
     * @type {FunFundingData}
     * @memberof FunFundingUpdatePayload
     */
    data?: FunFundingData;
}

/**
 * 
 * @export
 * @interface FunRequest
 */
export interface FunRequest {
    /**
     * 
     * @type {string}
     * @memberof FunRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof FunRequest
     */
    agreement_id?: string;
}

/**
 * 
 * @export
 * @interface HealthPong
 */
export interface HealthPong {
    /**
     * 
     * @type {string}
     * @memberof HealthPong
     */
    network?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthPong
     */
    version?: string;
}

/**
 * 
 * @export
 * @interface HttputilsHTTPError
 */
export interface HttputilsHTTPError {
    /**
     * 
     * @type {string}
     * @memberof HttputilsHTTPError
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface InvInvoiceCreatePayload
 */
export interface InvInvoiceCreatePayload {
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof InvInvoiceCreatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof InvInvoiceCreatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {InvInvoiceData}
     * @memberof InvInvoiceCreatePayload
     */
    data?: InvInvoiceData;
}

/**
 * 
 * @export
 * @interface InvInvoiceData
 */
export interface InvInvoiceData {
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_invoice_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    recipient_invoice_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_state?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_state?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_vat_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    bill_to_local_tax_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_state?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_vat_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_local_tax_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    remit_to_tax_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    ship_to_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    ship_to_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    ship_to_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    ship_to_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    ship_to_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    ship_to_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    ship_to_state?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    ship_to_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    gross_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    net_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    tax_rate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InvInvoiceData
     */
    tax_on_line_level?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    payee?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    shipping_terms?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    requester_email?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    requester_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    delivery_number?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InvInvoiceData
     */
    is_credit_note?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceData
     */
    credit_note_invoice_number?: string;
    /**
     * 
     * @type {Date}
     * @memberof InvInvoiceData
     */
    credit_for_invoice_date?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvInvoiceData
     */
    date_due?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvInvoiceData
     */
    date_paid?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvInvoiceData
     */
    date_updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvInvoiceData
     */
    date_created?: Date;
    /**
     * 
     * @type {Array<DocumentBinaryAttachment>}
     * @memberof InvInvoiceData
     */
    attachments?: Array<DocumentBinaryAttachment>;
    /**
     * 
     * @type {Array<InvLineItem>}
     * @memberof InvInvoiceData
     */
    line_items?: Array<InvLineItem>;
    /**
     * 
     * @type {Array<DocumentPaymentDetails>}
     * @memberof InvInvoiceData
     */
    payment_details?: Array<DocumentPaymentDetails>;
    /**
     * 
     * @type {Array<InvTaxItem>}
     * @memberof InvInvoiceData
     */
    tax_items?: Array<InvTaxItem>;
    /**
     * 
     * @type {{ [key: string]: DocumentAttribute; }}
     * @memberof InvInvoiceData
     */
    attributes?: { [key: string]: DocumentAttribute; };
}

/**
 * 
 * @export
 * @interface InvInvoiceResponse
 */
export interface InvInvoiceResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof InvInvoiceResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {InvInvoiceData}
     * @memberof InvInvoiceResponse
     */
    data?: InvInvoiceData;
}

/**
 * 
 * @export
 * @interface InvInvoiceUpdatePayload
 */
export interface InvInvoiceUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof InvInvoiceUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof InvInvoiceUpdatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof InvInvoiceUpdatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {InvInvoiceData}
     * @memberof InvInvoiceUpdatePayload
     */
    data?: InvInvoiceData;
}

/**
 * 
 * @export
 * @interface InvLineItem
 */
export interface InvLineItem {
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    sender_part_no?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    price_per_unit?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    unit_of_measure?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    net_weight?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    tax_rate?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    tax_code?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    total_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    purchase_order_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    purchase_order_item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvLineItem
     */
    delivery_note_number?: string;
}

/**
 * 
 * @export
 * @interface InvTaxItem
 */
export interface InvTaxItem {
    /**
     * 
     * @type {string}
     * @memberof InvTaxItem
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvTaxItem
     */
    invoice_item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvTaxItem
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvTaxItem
     */
    tax_rate?: string;
    /**
     * 
     * @type {string}
     * @memberof InvTaxItem
     */
    tax_code?: string;
    /**
     * 
     * @type {string}
     * @memberof InvTaxItem
     */
    tax_base_amount?: string;
}

/**
 * 
 * @export
 * @interface JobsJobStatusResponse
 */
export interface JobsJobStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof JobsJobStatusResponse
     */
    job_id?: string;
    /**
     * 
     * @type {string}
     * @memberof JobsJobStatusResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof JobsJobStatusResponse
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof JobsJobStatusResponse
     */
    last_updated?: Date;
}

/**
 * 
 * @export
 * @interface NftNFTMintInvoiceUnpaidRequest
 */
export interface NftNFTMintInvoiceUnpaidRequest {
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintInvoiceUnpaidRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintInvoiceUnpaidRequest
     */
    deposit_address?: string;
}

/**
 * 
 * @export
 * @interface NftNFTMintRequest
 */
export interface NftNFTMintRequest {
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    registry_address?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    deposit_address?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NftNFTMintRequest
     */
    proof_fields?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof NftNFTMintRequest
     */
    submit_token_proof?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NftNFTMintRequest
     */
    submit_nft_owner_access_proof?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NftNFTMintRequest
     */
    grant_nft_access?: boolean;
}

/**
 * 
 * @export
 * @interface NftNFTMintResponse
 */
export interface NftNFTMintResponse {
    /**
     * 
     * @type {NftResponseHeader}
     * @memberof NftNFTMintResponse
     */
    header?: NftResponseHeader;
}

/**
 * 
 * @export
 * @interface NftOwnerOfResponse
 */
export interface NftOwnerOfResponse {
    /**
     * 
     * @type {string}
     * @memberof NftOwnerOfResponse
     */
    token_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NftOwnerOfResponse
     */
    registry_address?: string;
    /**
     * 
     * @type {string}
     * @memberof NftOwnerOfResponse
     */
    owner?: string;
}

/**
 * 
 * @export
 * @interface NftResponseHeader
 */
export interface NftResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof NftResponseHeader
     */
    job_id?: string;
}

/**
 * 
 * @export
 * @interface NftTokenTransferRequest
 */
export interface NftTokenTransferRequest {
    /**
     * 
     * @type {string}
     * @memberof NftTokenTransferRequest
     */
    token_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NftTokenTransferRequest
     */
    registry_address?: string;
    /**
     * 
     * @type {string}
     * @memberof NftTokenTransferRequest
     */
    to?: string;
}

/**
 * 
 * @export
 * @interface NftTokenTransferResponse
 */
export interface NftTokenTransferResponse {
    /**
     * 
     * @type {NftResponseHeader}
     * @memberof NftTokenTransferResponse
     */
    header?: NftResponseHeader;
}

/**
 * 
 * @export
 * @interface NotificationNotificationMessage
 */
export interface NotificationNotificationMessage {
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationMessage
     */
    event_type?: number;
    /**
     * 
     * @type {Date}
     * @memberof NotificationNotificationMessage
     */
    recorded?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    document_type?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    account_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    from_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    to_id?: string;
}

/**
 * 
 * @export
 * @interface PoLineItem
 */
export interface PoLineItem {
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    amount_invoiced?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    amount_total?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    requisition_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    requisition_item?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    part_no?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    price_per_unit?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    unit_of_measure?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    received_quantity?: string;
    /**
     * 
     * @type {Date}
     * @memberof PoLineItem
     */
    date_updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoLineItem
     */
    date_created?: Date;
    /**
     * 
     * @type {string}
     * @memberof PoLineItem
     */
    revision_number?: string;
    /**
     * 
     * @type {Array<PoLineItemActivity>}
     * @memberof PoLineItem
     */
    activities?: Array<PoLineItemActivity>;
    /**
     * 
     * @type {Array<PoTaxItem>}
     * @memberof PoLineItem
     */
    tax_items?: Array<PoTaxItem>;
}

/**
 * 
 * @export
 * @interface PoLineItemActivity
 */
export interface PoLineItemActivity {
    /**
     * 
     * @type {string}
     * @memberof PoLineItemActivity
     */
    item_number?: string;
    /**
     * delivered, returned, credited, invoiced, paid, ...
     * @type {string}
     * @memberof PoLineItemActivity
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItemActivity
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItemActivity
     */
    amount?: string;
    /**
     * depending on status delivery note, invoice, ...
     * @type {string}
     * @memberof PoLineItemActivity
     */
    reference_document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PoLineItemActivity
     */
    reference_document_item?: string;
    /**
     * 
     * @type {Date}
     * @memberof PoLineItemActivity
     */
    date?: Date;
}

/**
 * 
 * @export
 * @interface PoPurchaseOrderCreatePayload
 */
export interface PoPurchaseOrderCreatePayload {
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof PoPurchaseOrderCreatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof PoPurchaseOrderCreatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {PoPurchaseOrderData}
     * @memberof PoPurchaseOrderCreatePayload
     */
    data?: PoPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PoPurchaseOrderData
 */
export interface PoPurchaseOrderData {
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    number?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    sender_order_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    recipient_order_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    requisition_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    requester_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    requester_email?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    ship_to_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    ship_to_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    ship_to_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    ship_to_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    ship_to_city?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    ship_to_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    ship_to_state?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    ship_to_country?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    payment_terms?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    total_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderData
     */
    comment?: string;
    /**
     * 
     * @type {Date}
     * @memberof PoPurchaseOrderData
     */
    date_sent?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoPurchaseOrderData
     */
    date_confirmed?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoPurchaseOrderData
     */
    date_updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoPurchaseOrderData
     */
    date_created?: Date;
    /**
     * 
     * @type {Array<DocumentBinaryAttachment>}
     * @memberof PoPurchaseOrderData
     */
    attachments?: Array<DocumentBinaryAttachment>;
    /**
     * 
     * @type {Array<PoLineItem>}
     * @memberof PoPurchaseOrderData
     */
    line_items?: Array<PoLineItem>;
    /**
     * 
     * @type {Array<DocumentPaymentDetails>}
     * @memberof PoPurchaseOrderData
     */
    payment_details?: Array<DocumentPaymentDetails>;
    /**
     * 
     * @type {{ [key: string]: DocumentAttribute; }}
     * @memberof PoPurchaseOrderData
     */
    attributes?: { [key: string]: DocumentAttribute; };
}

/**
 * 
 * @export
 * @interface PoPurchaseOrderResponse
 */
export interface PoPurchaseOrderResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof PoPurchaseOrderResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {PoPurchaseOrderData}
     * @memberof PoPurchaseOrderResponse
     */
    data?: PoPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PoPurchaseOrderUpdatePayload
 */
export interface PoPurchaseOrderUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof PoPurchaseOrderUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof PoPurchaseOrderUpdatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof PoPurchaseOrderUpdatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {PoPurchaseOrderData}
     * @memberof PoPurchaseOrderUpdatePayload
     */
    data?: PoPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PoTaxItem
 */
export interface PoTaxItem {
    /**
     * 
     * @type {string}
     * @memberof PoTaxItem
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PoTaxItem
     */
    purchase_order_item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PoTaxItem
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof PoTaxItem
     */
    tax_rate?: string;
    /**
     * 
     * @type {string}
     * @memberof PoTaxItem
     */
    tax_code?: string;
    /**
     * 
     * @type {string}
     * @memberof PoTaxItem
     */
    tax_base_amount?: string;
}


/**
 * AccountServiceApi - fetch parameter creator
 * @export
 */
export const AccountServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createAccount.');
            }
            const localVarPath = `/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountAccountData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling generateAccount.');
            }
            const localVarPath = `/accounts/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getAccount.');
            }
            const localVarPath = `/accounts/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getAllAccounts.');
            }
            const localVarPath = `/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling updateAccount.');
            }
            const localVarPath = `/accounts/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountUpdateAccountRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountServiceApi - functional programming interface
 * @export
 */
export const AccountServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).createAccount(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).generateAccount(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).getAccount(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountGetAllAccountResponse> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).getAllAccounts(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).updateAccount(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountServiceApi - factory interface
 * @export
 */
export const AccountServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).createAccount(body, authorization, options)(fetch, basePath);
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).generateAccount(authorization, options)(fetch, basePath);
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).getAccount(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).getAllAccounts(authorization, options)(fetch, basePath);
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).updateAccount(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * AccountServiceApi - object-oriented interface
 * @export
 * @class AccountServiceApi
 * @extends {BaseAPI}
 */
export class AccountServiceApi extends BaseAPI {
    /**
     * Creates an Account
     * @param {AccountAccountData} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public createAccount(body: AccountAccountData, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).createAccount(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Generates an Account taking defaults based on the main account
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public generateAccount(authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).generateAccount(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get Account
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public getAccount(identifier: string, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).getAccount(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get All Accounts
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public getAllAccounts(authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).getAllAccounts(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an Account
     * @param {string} identifier 
     * @param {AccountUpdateAccountRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).updateAccount(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * DocumentServiceApi - fetch parameter creator
 * @export
 */
export const DocumentServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createDocumentProof.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocumentProof.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createDocumentProof.');
            }
            const localVarPath = `/document/{identifier}/proof`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DocumentCreateDocumentProofRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createDocumentProofForVersion.');
            }
            const localVarPath = `/document/{identifier}/{version}/proof`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DocumentCreateDocumentProofForVersionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentServiceApi - functional programming interface
 * @export
 */
export const DocumentServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentDocumentProof> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).createDocumentProof(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentDocumentProof> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).createDocumentProofForVersion(identifier, version, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DocumentServiceApi - factory interface
 * @export
 */
export const DocumentServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).createDocumentProof(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).createDocumentProofForVersion(identifier, version, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * DocumentServiceApi - object-oriented interface
 * @export
 * @class DocumentServiceApi
 * @extends {BaseAPI}
 */
export class DocumentServiceApi extends BaseAPI {
    /**
     * Creates a list of precise proofs for the specified fields of the document given by ID
     * @param {string} identifier 
     * @param {DocumentCreateDocumentProofRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).createDocumentProof(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
     * @param {string} identifier 
     * @param {string} version 
     * @param {DocumentCreateDocumentProofForVersionRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).createDocumentProofForVersion(identifier, version, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * DocumentsApi - fetch parameter creator
 * @export
 */
export const DocumentsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new document and anchors it.
         * @summary Creates a new document and anchors it.
         * @param {string} authorization centrifuge identity
         * @param {CoreapiCreateDocumentRequest} body Document Create request
         * @param {string} authorization2 Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocument(authorization: string, body: CoreapiCreateDocumentRequest, authorization2: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createDocument.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocument.');
            }
            // verify required parameter 'authorization2' is not null or undefined
            if (authorization2 === null || authorization2 === undefined) {
                throw new RequiredError('authorization2','Required parameter authorization2 was null or undefined when calling createDocument.');
            }
            const localVarPath = `/documents`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (authorization2 !== undefined && authorization2 !== null) {
                localVarHeaderParameter['authorization'] = String(authorization2);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CoreapiCreateDocumentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing document and anchors it.
         * @summary Updates an existing document and anchors it.
         * @param {string} authorization centrifuge identity
         * @param {CoreapiUpdateDocumentRequest} body Document Update request
         * @param {string} authorization2 Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument(authorization: string, body: CoreapiUpdateDocumentRequest, authorization2: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling updateDocument.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateDocument.');
            }
            // verify required parameter 'authorization2' is not null or undefined
            if (authorization2 === null || authorization2 === undefined) {
                throw new RequiredError('authorization2','Required parameter authorization2 was null or undefined when calling updateDocument.');
            }
            const localVarPath = `/documents`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (authorization2 !== undefined && authorization2 !== null) {
                localVarHeaderParameter['authorization'] = String(authorization2);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CoreapiUpdateDocumentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new document and anchors it.
         * @summary Creates a new document and anchors it.
         * @param {string} authorization centrifuge identity
         * @param {CoreapiCreateDocumentRequest} body Document Create request
         * @param {string} authorization2 Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocument(authorization: string, body: CoreapiCreateDocumentRequest, authorization2: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CoreapiDocumentResponse> {
            const localVarFetchArgs = DocumentsApiFetchParamCreator(configuration).createDocument(authorization, body, authorization2, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an existing document and anchors it.
         * @summary Updates an existing document and anchors it.
         * @param {string} authorization centrifuge identity
         * @param {CoreapiUpdateDocumentRequest} body Document Update request
         * @param {string} authorization2 Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument(authorization: string, body: CoreapiUpdateDocumentRequest, authorization2: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CoreapiDocumentResponse> {
            const localVarFetchArgs = DocumentsApiFetchParamCreator(configuration).updateDocument(authorization, body, authorization2, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates a new document and anchors it.
         * @summary Creates a new document and anchors it.
         * @param {string} authorization centrifuge identity
         * @param {CoreapiCreateDocumentRequest} body Document Create request
         * @param {string} authorization2 Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocument(authorization: string, body: CoreapiCreateDocumentRequest, authorization2: string, options?: any) {
            return DocumentsApiFp(configuration).createDocument(authorization, body, authorization2, options)(fetch, basePath);
        },
        /**
         * Updates an existing document and anchors it.
         * @summary Updates an existing document and anchors it.
         * @param {string} authorization centrifuge identity
         * @param {CoreapiUpdateDocumentRequest} body Document Update request
         * @param {string} authorization2 Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument(authorization: string, body: CoreapiUpdateDocumentRequest, authorization2: string, options?: any) {
            return DocumentsApiFp(configuration).updateDocument(authorization, body, authorization2, options)(fetch, basePath);
        },
    };
};

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * Creates a new document and anchors it.
     * @summary Creates a new document and anchors it.
     * @param {string} authorization centrifuge identity
     * @param {CoreapiCreateDocumentRequest} body Document Create request
     * @param {string} authorization2 Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public createDocument(authorization: string, body: CoreapiCreateDocumentRequest, authorization2: string, options?: any) {
        return DocumentsApiFp(this.configuration).createDocument(authorization, body, authorization2, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an existing document and anchors it.
     * @summary Updates an existing document and anchors it.
     * @param {string} authorization centrifuge identity
     * @param {CoreapiUpdateDocumentRequest} body Document Update request
     * @param {string} authorization2 Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public updateDocument(authorization: string, body: CoreapiUpdateDocumentRequest, authorization2: string, options?: any) {
        return DocumentsApiFp(this.configuration).updateDocument(authorization, body, authorization2, options)(this.fetch, this.basePath);
    }

}

/**
 * EntityServiceApi - fetch parameter creator
 * @export
 */
export const EntityServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an entity
         * @param {EntityEntityCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: EntityEntityCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create.');
            }
            const localVarPath = `/entity`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityEntityCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current entity
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get.');
            }
            const localVarPath = `/entity/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get entity from business partner
         * @summary Entity Relation Get
         * @param {string} relationship_identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityByRelationship(relationship_identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'relationship_identifier' is not null or undefined
            if (relationship_identifier === null || relationship_identifier === undefined) {
                throw new RequiredError('relationship_identifier','Required parameter relationship_identifier was null or undefined when calling getEntityByRelationship.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEntityByRelationship.');
            }
            const localVarPath = `/relationship/{relationship_identifier}/entity`
                .replace(`{${"relationship_identifier"}}`, encodeURIComponent(String(relationship_identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * revoke an entity document share
         * @summary Entity Relation Revoke
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke(identifier: string, body: EntityRelationshipPayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling revoke.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling revoke.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling revoke.');
            }
            const localVarPath = `/entity/{identifier}/revoke`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityRelationshipPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Share the entity document with others
         * @summary Entity Relation Share
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share(identifier: string, body: EntityRelationshipPayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling share.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling share.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling share.');
            }
            const localVarPath = `/entity/{identifier}/share`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityRelationshipPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an entity
         * @param {string} identifier 
         * @param {EntityEntityUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: EntityEntityUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update.');
            }
            const localVarPath = `/entity/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityEntityUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntityServiceApi - functional programming interface
 * @export
 */
export const EntityServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an entity
         * @param {EntityEntityCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: EntityEntityCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).create(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current entity
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).get(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get entity from business partner
         * @summary Entity Relation Get
         * @param {string} relationship_identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityByRelationship(relationship_identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).getEntityByRelationship(relationship_identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * revoke an entity document share
         * @summary Entity Relation Revoke
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityRelationshipResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).revoke(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Share the entity document with others
         * @summary Entity Relation Share
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityRelationshipResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).share(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an entity
         * @param {string} identifier 
         * @param {EntityEntityUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: EntityEntityUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).update(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EntityServiceApi - factory interface
 * @export
 */
export const EntityServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an entity
         * @param {EntityEntityCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: EntityEntityCreatePayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).create(body, authorization, options)(fetch, basePath);
        },
        /**
         * Get the current entity
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).get(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get entity from business partner
         * @summary Entity Relation Get
         * @param {string} relationship_identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityByRelationship(relationship_identifier: string, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).getEntityByRelationship(relationship_identifier, authorization, options)(fetch, basePath);
        },
        /**
         * revoke an entity document share
         * @summary Entity Relation Revoke
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).revoke(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Share the entity document with others
         * @summary Entity Relation Share
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).share(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Updates an entity
         * @param {string} identifier 
         * @param {EntityEntityUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: EntityEntityUpdatePayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).update(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * EntityServiceApi - object-oriented interface
 * @export
 * @class EntityServiceApi
 * @extends {BaseAPI}
 */
export class EntityServiceApi extends BaseAPI {
    /**
     * Creates an entity
     * @param {EntityEntityCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public create(body: EntityEntityCreatePayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).create(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current entity
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public get(identifier: string, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).get(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get entity from business partner
     * @summary Entity Relation Get
     * @param {string} relationship_identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public getEntityByRelationship(relationship_identifier: string, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).getEntityByRelationship(relationship_identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * revoke an entity document share
     * @summary Entity Relation Revoke
     * @param {string} identifier entity identifier
     * @param {EntityRelationshipPayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public revoke(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).revoke(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Share the entity document with others
     * @summary Entity Relation Share
     * @param {string} identifier entity identifier
     * @param {EntityRelationshipPayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public share(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).share(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an entity
     * @param {string} identifier 
     * @param {EntityEntityUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public update(identifier: string, body: EntityEntityUpdatePayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).update(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * FundingServiceApi - fetch parameter creator
 * @export
 */
export const FundingServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a funding to a document
         * @param {string} identifier 
         * @param {FunFundingCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(identifier: string, body: FunFundingCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling create.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create.');
            }
            const localVarPath = `/documents/{identifier}/fundings`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FunFundingCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a funding agreement of a latest document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, agreement_id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            // verify required parameter 'agreement_id' is not null or undefined
            if (agreement_id === null || agreement_id === undefined) {
                throw new RequiredError('agreement_id','Required parameter agreement_id was null or undefined when calling get.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get.');
            }
            const localVarPath = `/documents/{identifier}/fundings/{agreement_id}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"agreement_id"}}`, encodeURIComponent(String(agreement_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all funding agreements of a latest document
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getList.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getList.');
            }
            const localVarPath = `/documents/{identifier}/fundings`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all funding agreements of a document version
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListVersion(identifier: string, version: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getListVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getListVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getListVersion.');
            }
            const localVarPath = `/documents/{identifier}/{version}/fundings`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a funding agreement of a document version
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} agreement_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, agreement_id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion.');
            }
            // verify required parameter 'agreement_id' is not null or undefined
            if (agreement_id === null || agreement_id === undefined) {
                throw new RequiredError('agreement_id','Required parameter agreement_id was null or undefined when calling getVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getVersion.');
            }
            const localVarPath = `/documents/{identifier}/{version}/fundings/{agreement_id}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"agreement_id"}}`, encodeURIComponent(String(agreement_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signs funding agreement in a document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {FunRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(identifier: string, agreement_id: string, body: FunRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling sign.');
            }
            // verify required parameter 'agreement_id' is not null or undefined
            if (agreement_id === null || agreement_id === undefined) {
                throw new RequiredError('agreement_id','Required parameter agreement_id was null or undefined when calling sign.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sign.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling sign.');
            }
            const localVarPath = `/documents/{identifier}/fundings/{agreement_id}/sign`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"agreement_id"}}`, encodeURIComponent(String(agreement_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FunRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a funding agreement in a document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {FunFundingUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, agreement_id: string, body: FunFundingUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'agreement_id' is not null or undefined
            if (agreement_id === null || agreement_id === undefined) {
                throw new RequiredError('agreement_id','Required parameter agreement_id was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update.');
            }
            const localVarPath = `/documents/{identifier}/fundings/{agreement_id}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"agreement_id"}}`, encodeURIComponent(String(agreement_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FunFundingUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundingServiceApi - functional programming interface
 * @export
 */
export const FundingServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a funding to a document
         * @param {string} identifier 
         * @param {FunFundingCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(identifier: string, body: FunFundingCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FunFundingResponse> {
            const localVarFetchArgs = FundingServiceApiFetchParamCreator(configuration).create(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a funding agreement of a latest document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, agreement_id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FunFundingResponse> {
            const localVarFetchArgs = FundingServiceApiFetchParamCreator(configuration).get(identifier, agreement_id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all funding agreements of a latest document
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FunFundingListResponse> {
            const localVarFetchArgs = FundingServiceApiFetchParamCreator(configuration).getList(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all funding agreements of a document version
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListVersion(identifier: string, version: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FunFundingListResponse> {
            const localVarFetchArgs = FundingServiceApiFetchParamCreator(configuration).getListVersion(identifier, version, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a funding agreement of a document version
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} agreement_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, agreement_id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FunFundingResponse> {
            const localVarFetchArgs = FundingServiceApiFetchParamCreator(configuration).getVersion(identifier, version, agreement_id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Signs funding agreement in a document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {FunRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(identifier: string, agreement_id: string, body: FunRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FunFundingResponse> {
            const localVarFetchArgs = FundingServiceApiFetchParamCreator(configuration).sign(identifier, agreement_id, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a funding agreement in a document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {FunFundingUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, agreement_id: string, body: FunFundingUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FunFundingResponse> {
            const localVarFetchArgs = FundingServiceApiFetchParamCreator(configuration).update(identifier, agreement_id, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FundingServiceApi - factory interface
 * @export
 */
export const FundingServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Adds a funding to a document
         * @param {string} identifier 
         * @param {FunFundingCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(identifier: string, body: FunFundingCreatePayload, authorization: string, options?: any) {
            return FundingServiceApiFp(configuration).create(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Get a funding agreement of a latest document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, agreement_id: string, authorization: string, options?: any) {
            return FundingServiceApiFp(configuration).get(identifier, agreement_id, authorization, options)(fetch, basePath);
        },
        /**
         * Get all funding agreements of a latest document
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(identifier: string, authorization: string, options?: any) {
            return FundingServiceApiFp(configuration).getList(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get all funding agreements of a document version
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListVersion(identifier: string, version: string, authorization: string, options?: any) {
            return FundingServiceApiFp(configuration).getListVersion(identifier, version, authorization, options)(fetch, basePath);
        },
        /**
         * Get a funding agreement of a document version
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} agreement_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, agreement_id: string, authorization: string, options?: any) {
            return FundingServiceApiFp(configuration).getVersion(identifier, version, agreement_id, authorization, options)(fetch, basePath);
        },
        /**
         * Signs funding agreement in a document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {FunRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(identifier: string, agreement_id: string, body: FunRequest, authorization: string, options?: any) {
            return FundingServiceApiFp(configuration).sign(identifier, agreement_id, body, authorization, options)(fetch, basePath);
        },
        /**
         * Updates a funding agreement in a document
         * @param {string} identifier 
         * @param {string} agreement_id 
         * @param {FunFundingUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, agreement_id: string, body: FunFundingUpdatePayload, authorization: string, options?: any) {
            return FundingServiceApiFp(configuration).update(identifier, agreement_id, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * FundingServiceApi - object-oriented interface
 * @export
 * @class FundingServiceApi
 * @extends {BaseAPI}
 */
export class FundingServiceApi extends BaseAPI {
    /**
     * Adds a funding to a document
     * @param {string} identifier 
     * @param {FunFundingCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingServiceApi
     */
    public create(identifier: string, body: FunFundingCreatePayload, authorization: string, options?: any) {
        return FundingServiceApiFp(this.configuration).create(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a funding agreement of a latest document
     * @param {string} identifier 
     * @param {string} agreement_id 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingServiceApi
     */
    public get(identifier: string, agreement_id: string, authorization: string, options?: any) {
        return FundingServiceApiFp(this.configuration).get(identifier, agreement_id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get all funding agreements of a latest document
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingServiceApi
     */
    public getList(identifier: string, authorization: string, options?: any) {
        return FundingServiceApiFp(this.configuration).getList(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get all funding agreements of a document version
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingServiceApi
     */
    public getListVersion(identifier: string, version: string, authorization: string, options?: any) {
        return FundingServiceApiFp(this.configuration).getListVersion(identifier, version, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a funding agreement of a document version
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} agreement_id 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingServiceApi
     */
    public getVersion(identifier: string, version: string, agreement_id: string, authorization: string, options?: any) {
        return FundingServiceApiFp(this.configuration).getVersion(identifier, version, agreement_id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Signs funding agreement in a document
     * @param {string} identifier 
     * @param {string} agreement_id 
     * @param {FunRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingServiceApi
     */
    public sign(identifier: string, agreement_id: string, body: FunRequest, authorization: string, options?: any) {
        return FundingServiceApiFp(this.configuration).sign(identifier, agreement_id, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates a funding agreement in a document
     * @param {string} identifier 
     * @param {string} agreement_id 
     * @param {FunFundingUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingServiceApi
     */
    public update(identifier: string, agreement_id: string, body: FunFundingUpdatePayload, authorization: string, options?: any) {
        return FundingServiceApiFp(this.configuration).update(identifier, agreement_id, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * HealthApi - fetch parameter creator
 * @export
 */
export const HealthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * returns node version and network
         * @summary Health check for Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options: any = {}): FetchArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * returns node version and network
         * @summary Health check for Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HealthPong> {
            const localVarFetchArgs = HealthApiFetchParamCreator(configuration).ping(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * returns node version and network
         * @summary Health check for Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: any) {
            return HealthApiFp(configuration).ping(options)(fetch, basePath);
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * returns node version and network
     * @summary Health check for Node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public ping(options?: any) {
        return HealthApiFp(this.configuration).ping(options)(this.fetch, this.basePath);
    }

}

/**
 * InvoiceServiceApi - fetch parameter creator
 * @export
 */
export const InvoiceServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an invoice
         * @param {InvInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvInvoiceCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create.');
            }
            const localVarPath = `/invoice`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InvInvoiceCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get.');
            }
            const localVarPath = `/invoice/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getVersion.');
            }
            const localVarPath = `/invoice/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvInvoiceUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update.');
            }
            const localVarPath = `/invoice/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InvInvoiceUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoiceServiceApi - functional programming interface
 * @export
 */
export const InvoiceServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an invoice
         * @param {InvInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvInvoiceCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvInvoiceResponse> {
            const localVarFetchArgs = InvoiceServiceApiFetchParamCreator(configuration).create(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvInvoiceResponse> {
            const localVarFetchArgs = InvoiceServiceApiFetchParamCreator(configuration).get(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvInvoiceResponse> {
            const localVarFetchArgs = InvoiceServiceApiFetchParamCreator(configuration).getVersion(identifier, version, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvInvoiceUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvInvoiceResponse> {
            const localVarFetchArgs = InvoiceServiceApiFetchParamCreator(configuration).update(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InvoiceServiceApi - factory interface
 * @export
 */
export const InvoiceServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an invoice
         * @param {InvInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvInvoiceCreatePayload, authorization: string, options?: any) {
            return InvoiceServiceApiFp(configuration).create(body, authorization, options)(fetch, basePath);
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any) {
            return InvoiceServiceApiFp(configuration).get(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any) {
            return InvoiceServiceApiFp(configuration).getVersion(identifier, version, authorization, options)(fetch, basePath);
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvInvoiceUpdatePayload, authorization: string, options?: any) {
            return InvoiceServiceApiFp(configuration).update(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * InvoiceServiceApi - object-oriented interface
 * @export
 * @class InvoiceServiceApi
 * @extends {BaseAPI}
 */
export class InvoiceServiceApi extends BaseAPI {
    /**
     * Creates an invoice
     * @param {InvInvoiceCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceServiceApi
     */
    public create(body: InvInvoiceCreatePayload, authorization: string, options?: any) {
        return InvoiceServiceApiFp(this.configuration).create(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current invoice
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceServiceApi
     */
    public get(identifier: string, authorization: string, options?: any) {
        return InvoiceServiceApiFp(this.configuration).get(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of an invoice
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceServiceApi
     */
    public getVersion(identifier: string, version: string, authorization: string, options?: any) {
        return InvoiceServiceApiFp(this.configuration).getVersion(identifier, version, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an invoice
     * @param {string} identifier 
     * @param {InvInvoiceUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceServiceApi
     */
    public update(identifier: string, body: InvInvoiceUpdatePayload, authorization: string, options?: any) {
        return InvoiceServiceApiFp(this.configuration).update(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * JobServiceApi - fetch parameter creator
 * @export
 */
export const JobServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Job Status
         * @param {string} job_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStatus(job_id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'job_id' is not null or undefined
            if (job_id === null || job_id === undefined) {
                throw new RequiredError('job_id','Required parameter job_id was null or undefined when calling getJobStatus.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getJobStatus.');
            }
            const localVarPath = `/jobs/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(job_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobServiceApi - functional programming interface
 * @export
 */
export const JobServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Job Status
         * @param {string} job_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStatus(job_id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JobsJobStatusResponse> {
            const localVarFetchArgs = JobServiceApiFetchParamCreator(configuration).getJobStatus(job_id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * JobServiceApi - factory interface
 * @export
 */
export const JobServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get Job Status
         * @param {string} job_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStatus(job_id: string, authorization: string, options?: any) {
            return JobServiceApiFp(configuration).getJobStatus(job_id, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * JobServiceApi - object-oriented interface
 * @export
 * @class JobServiceApi
 * @extends {BaseAPI}
 */
export class JobServiceApi extends BaseAPI {
    /**
     * Get Job Status
     * @param {string} job_id 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobServiceApi
     */
    public getJobStatus(job_id: string, authorization: string, options?: any) {
        return JobServiceApiFp(this.configuration).getJobStatus(job_id, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * NFTServiceApi - fetch parameter creator
 * @export
 */
export const NFTServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mints an NFT out of an Unpaid Centrifuge Invoice
         * @param {string} identifier Invoice Document identifier
         * @param {NftNFTMintInvoiceUnpaidRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintInvoiceUnpaidNFT(identifier: string, body: NftNFTMintInvoiceUnpaidRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling mintInvoiceUnpaidNFT.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mintInvoiceUnpaidNFT.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling mintInvoiceUnpaidNFT.');
            }
            const localVarPath = `/nfts/{identifier}/invoice/unpaid/mint`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NftNFTMintInvoiceUnpaidRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mintNFT.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling mintNFT.');
            }
            const localVarPath = `/nfts/mint`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NftNFTMintRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the owner of an NFT
         * @param {string} token_id 
         * @param {string} registry_address 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownerOf(token_id: string, registry_address: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'token_id' is not null or undefined
            if (token_id === null || token_id === undefined) {
                throw new RequiredError('token_id','Required parameter token_id was null or undefined when calling ownerOf.');
            }
            // verify required parameter 'registry_address' is not null or undefined
            if (registry_address === null || registry_address === undefined) {
                throw new RequiredError('registry_address','Required parameter registry_address was null or undefined when calling ownerOf.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling ownerOf.');
            }
            const localVarPath = `/nfts/{token_id}/registry/{registry_address}/owner`
                .replace(`{${"token_id"}}`, encodeURIComponent(String(token_id)))
                .replace(`{${"registry_address"}}`, encodeURIComponent(String(registry_address)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer an NFT owned by the identity contract
         * @param {string} token_id 
         * @param {NftTokenTransferRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTransfer(token_id: string, body: NftTokenTransferRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'token_id' is not null or undefined
            if (token_id === null || token_id === undefined) {
                throw new RequiredError('token_id','Required parameter token_id was null or undefined when calling tokenTransfer.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling tokenTransfer.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling tokenTransfer.');
            }
            const localVarPath = `/nfts/{token_id}/transfer`
                .replace(`{${"token_id"}}`, encodeURIComponent(String(token_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NftTokenTransferRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NFTServiceApi - functional programming interface
 * @export
 */
export const NFTServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Mints an NFT out of an Unpaid Centrifuge Invoice
         * @param {string} identifier Invoice Document identifier
         * @param {NftNFTMintInvoiceUnpaidRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintInvoiceUnpaidNFT(identifier: string, body: NftNFTMintInvoiceUnpaidRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NftNFTMintResponse> {
            const localVarFetchArgs = NFTServiceApiFetchParamCreator(configuration).mintInvoiceUnpaidNFT(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NftNFTMintResponse> {
            const localVarFetchArgs = NFTServiceApiFetchParamCreator(configuration).mintNFT(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the owner of an NFT
         * @param {string} token_id 
         * @param {string} registry_address 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownerOf(token_id: string, registry_address: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NftOwnerOfResponse> {
            const localVarFetchArgs = NFTServiceApiFetchParamCreator(configuration).ownerOf(token_id, registry_address, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Transfer an NFT owned by the identity contract
         * @param {string} token_id 
         * @param {NftTokenTransferRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTransfer(token_id: string, body: NftTokenTransferRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NftTokenTransferResponse> {
            const localVarFetchArgs = NFTServiceApiFetchParamCreator(configuration).tokenTransfer(token_id, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NFTServiceApi - factory interface
 * @export
 */
export const NFTServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Mints an NFT out of an Unpaid Centrifuge Invoice
         * @param {string} identifier Invoice Document identifier
         * @param {NftNFTMintInvoiceUnpaidRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintInvoiceUnpaidNFT(identifier: string, body: NftNFTMintInvoiceUnpaidRequest, authorization: string, options?: any) {
            return NFTServiceApiFp(configuration).mintInvoiceUnpaidNFT(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options?: any) {
            return NFTServiceApiFp(configuration).mintNFT(body, authorization, options)(fetch, basePath);
        },
        /**
         * Get the owner of an NFT
         * @param {string} token_id 
         * @param {string} registry_address 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownerOf(token_id: string, registry_address: string, authorization: string, options?: any) {
            return NFTServiceApiFp(configuration).ownerOf(token_id, registry_address, authorization, options)(fetch, basePath);
        },
        /**
         * Transfer an NFT owned by the identity contract
         * @param {string} token_id 
         * @param {NftTokenTransferRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTransfer(token_id: string, body: NftTokenTransferRequest, authorization: string, options?: any) {
            return NFTServiceApiFp(configuration).tokenTransfer(token_id, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * NFTServiceApi - object-oriented interface
 * @export
 * @class NFTServiceApi
 * @extends {BaseAPI}
 */
export class NFTServiceApi extends BaseAPI {
    /**
     * Mints an NFT out of an Unpaid Centrifuge Invoice
     * @param {string} identifier Invoice Document identifier
     * @param {NftNFTMintInvoiceUnpaidRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTServiceApi
     */
    public mintInvoiceUnpaidNFT(identifier: string, body: NftNFTMintInvoiceUnpaidRequest, authorization: string, options?: any) {
        return NFTServiceApiFp(this.configuration).mintInvoiceUnpaidNFT(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Mint an NFT from a Centrifuge Document
     * @param {NftNFTMintRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTServiceApi
     */
    public mintNFT(body: NftNFTMintRequest, authorization: string, options?: any) {
        return NFTServiceApiFp(this.configuration).mintNFT(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the owner of an NFT
     * @param {string} token_id 
     * @param {string} registry_address 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTServiceApi
     */
    public ownerOf(token_id: string, registry_address: string, authorization: string, options?: any) {
        return NFTServiceApiFp(this.configuration).ownerOf(token_id, registry_address, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Transfer an NFT owned by the identity contract
     * @param {string} token_id 
     * @param {NftTokenTransferRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTServiceApi
     */
    public tokenTransfer(token_id: string, body: NftTokenTransferRequest, authorization: string, options?: any) {
        return NFTServiceApiFp(this.configuration).tokenTransfer(token_id, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * NotificationDummyServiceApi - fetch parameter creator
 * @export
 */
export const NotificationDummyServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling notify.');
            }
            const localVarPath = `/dummy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationDummyServiceApi - functional programming interface
 * @export
 */
export const NotificationDummyServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationNotificationMessage> {
            const localVarFetchArgs = NotificationDummyServiceApiFetchParamCreator(configuration).notify(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationDummyServiceApi - factory interface
 * @export
 */
export const NotificationDummyServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options?: any) {
            return NotificationDummyServiceApiFp(configuration).notify(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationDummyServiceApi - object-oriented interface
 * @export
 * @class NotificationDummyServiceApi
 * @extends {BaseAPI}
 */
export class NotificationDummyServiceApi extends BaseAPI {
    /**
     * Dummy notification endpoint
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationDummyServiceApi
     */
    public notify(authorization: string, options?: any) {
        return NotificationDummyServiceApiFp(this.configuration).notify(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * PurchaseOrderServiceApi - fetch parameter creator
 * @export
 */
export const PurchaseOrderServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a purchase order
         * @param {PoPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: PoPurchaseOrderCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create.');
            }
            const localVarPath = `/purchaseorder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PoPurchaseOrderCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get.');
            }
            const localVarPath = `/purchaseorder/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getVersion.');
            }
            const localVarPath = `/purchaseorder/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PoPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: PoPurchaseOrderUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update.');
            }
            const localVarPath = `/purchaseorder/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PoPurchaseOrderUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseOrderServiceApi - functional programming interface
 * @export
 */
export const PurchaseOrderServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a purchase order
         * @param {PoPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: PoPurchaseOrderCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PoPurchaseOrderResponse> {
            const localVarFetchArgs = PurchaseOrderServiceApiFetchParamCreator(configuration).create(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PoPurchaseOrderResponse> {
            const localVarFetchArgs = PurchaseOrderServiceApiFetchParamCreator(configuration).get(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PoPurchaseOrderResponse> {
            const localVarFetchArgs = PurchaseOrderServiceApiFetchParamCreator(configuration).getVersion(identifier, version, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PoPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: PoPurchaseOrderUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PoPurchaseOrderResponse> {
            const localVarFetchArgs = PurchaseOrderServiceApiFetchParamCreator(configuration).update(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PurchaseOrderServiceApi - factory interface
 * @export
 */
export const PurchaseOrderServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates a purchase order
         * @param {PoPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: PoPurchaseOrderCreatePayload, authorization: string, options?: any) {
            return PurchaseOrderServiceApiFp(configuration).create(body, authorization, options)(fetch, basePath);
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any) {
            return PurchaseOrderServiceApiFp(configuration).get(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any) {
            return PurchaseOrderServiceApiFp(configuration).getVersion(identifier, version, authorization, options)(fetch, basePath);
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PoPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: PoPurchaseOrderUpdatePayload, authorization: string, options?: any) {
            return PurchaseOrderServiceApiFp(configuration).update(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * PurchaseOrderServiceApi - object-oriented interface
 * @export
 * @class PurchaseOrderServiceApi
 * @extends {BaseAPI}
 */
export class PurchaseOrderServiceApi extends BaseAPI {
    /**
     * Creates a purchase order
     * @param {PoPurchaseOrderCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseOrderServiceApi
     */
    public create(body: PoPurchaseOrderCreatePayload, authorization: string, options?: any) {
        return PurchaseOrderServiceApiFp(this.configuration).create(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current version of a purchase order
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseOrderServiceApi
     */
    public get(identifier: string, authorization: string, options?: any) {
        return PurchaseOrderServiceApiFp(this.configuration).get(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of a purchase order
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseOrderServiceApi
     */
    public getVersion(identifier: string, version: string, authorization: string, options?: any) {
        return PurchaseOrderServiceApiFp(this.configuration).getVersion(identifier, version, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates a purchase order
     * @param {string} identifier 
     * @param {PoPurchaseOrderUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseOrderServiceApi
     */
    public update(identifier: string, body: PoPurchaseOrderUpdatePayload, authorization: string, options?: any) {
        return PurchaseOrderServiceApiFp(this.configuration).update(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

