/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Centrifuge OS Node API
 *  
 *
 * OpenAPI spec version: 0.0.3-alpha4
 * Contact: hello@centrifuge.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountAccountData
 */
export interface AccountAccountData {
    /**
     * 
     * @type {AccountEthereumAccount}
     * @memberof AccountAccountData
     */
    eth_account?: AccountEthereumAccount;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    eth_default_account_name?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    receive_event_notification_endpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    identity_id?: string;
    /**
     * 
     * @type {AccountKeyPair}
     * @memberof AccountAccountData
     */
    signing_key_pair?: AccountKeyPair;
    /**
     * 
     * @type {AccountKeyPair}
     * @memberof AccountAccountData
     */
    p2p_key_pair?: AccountKeyPair;
}

/**
 * 
 * @export
 * @interface AccountEthereumAccount
 */
export interface AccountEthereumAccount {
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface AccountGetAllAccountResponse
 */
export interface AccountGetAllAccountResponse {
    /**
     * 
     * @type {Array<AccountAccountData>}
     * @memberof AccountGetAllAccountResponse
     */
    data?: Array<AccountAccountData>;
}

/**
 * 
 * @export
 * @interface AccountKeyPair
 */
export interface AccountKeyPair {
    /**
     * 
     * @type {string}
     * @memberof AccountKeyPair
     */
    pub?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountKeyPair
     */
    pvt?: string;
}

/**
 * 
 * @export
 * @interface AccountUpdateAccountRequest
 */
export interface AccountUpdateAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateAccountRequest
     */
    identifier?: string;
    /**
     * 
     * @type {AccountAccountData}
     * @memberof AccountUpdateAccountRequest
     */
    data?: AccountAccountData;
}

/**
 * 
 * @export
 * @interface ConfigConfigData
 */
export interface ConfigConfigData {
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    storage_path?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    p2p_port?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    p2p_external_ip?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    p2p_connection_timeout?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    server_port?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    server_address?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    num_workers?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    worker_wait_time_ms?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_node_url?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_context_read_wait_timeout?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_context_wait_timeout?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_interval_retry?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    eth_max_retries?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_gas_price?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_gas_limit?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigConfigData
     */
    tx_pool_enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    network?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConfigConfigData
     */
    bootstrap_peers?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    network_id?: number;
    /**
     * 
     * @type {AccountAccountData}
     * @memberof ConfigConfigData
     */
    main_identity?: AccountAccountData;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ConfigConfigData
     */
    smart_contract_addresses?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ConfigConfigData
     */
    smart_contract_bytecode?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof ConfigConfigData
     */
    pprof_enabled?: boolean;
}

/**
 * Action defines the set of actions a collaborator can/have per document.   - ACTION_READ_SIGN: read_sign represents reading as well the sign the documents. We will pick this one when requesting the signatures.  - ACTION_READ: read represents just reading the doc/fields
 * @export
 * @enum {string}
 */
export enum CoredocumentAction {
    INVALID = <any> 'ACTION_INVALID',
    READSIGN = <any> 'ACTION_READ_SIGN',
    READ = <any> 'ACTION_READ'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum CoredocumentTransitionAction {
    INVALID = <any> 'TRANSITION_ACTION_INVALID',
    EDIT = <any> 'TRANSITION_ACTION_EDIT'
}

/**
 * 
 * @export
 * @interface DocumentAccessToken
 */
export interface DocumentAccessToken {
    /**
     * 
     * @type {string}
     * @memberof DocumentAccessToken
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentAccessToken
     */
    granter?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentAccessToken
     */
    grantee?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentAccessToken
     */
    document_identifier?: string;
}

/**
 * 
 * @export
 * @interface DocumentBinaryAttachment
 */
export interface DocumentBinaryAttachment {
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    file_type?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    size?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    data?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentBinaryAttachment
     */
    checksum?: string;
}

/**
 * 
 * @export
 * @interface DocumentCreateDocumentProofForVersionRequest
 */
export interface DocumentCreateDocumentProofForVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    version?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentCreateDocumentProofRequest
 */
export interface DocumentCreateDocumentProofRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofRequest
     */
    type?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentCreateDocumentProofRequest
     */
    fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentDocumentProof
 */
export interface DocumentDocumentProof {
    /**
     * 
     * @type {DocumentProofResponseHeader}
     * @memberof DocumentDocumentProof
     */
    header?: DocumentProofResponseHeader;
    /**
     * 
     * @type {Array<DocumentProof>}
     * @memberof DocumentDocumentProof
     */
    field_proofs?: Array<DocumentProof>;
}

/**
 * 
 * @export
 * @interface DocumentNFT
 */
export interface DocumentNFT {
    /**
     * 
     * @type {string}
     * @memberof DocumentNFT
     */
    registry?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentNFT
     */
    token_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentNFT
     */
    owner?: string;
}

/**
 * 
 * @export
 * @interface DocumentPaymentDetails
 */
export interface DocumentPaymentDetails {
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof DocumentPaymentDetails
     */
    date_executed?: Date;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    payee?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    payer?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    reference?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_name?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_address?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_country?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_account_number?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_account_currency?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_account_holder_name?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    bank_key?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    crypto_chain_uri?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    crypto_transaction_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    crypto_from?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentPaymentDetails
     */
    crypto_to?: string;
}

/**
 * 
 * @export
 * @interface DocumentProof
 */
export interface DocumentProof {
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    property?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    salt?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    hash?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentProof
     */
    sorted_hashes?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentProofResponseHeader
 */
export interface DocumentProofResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof DocumentProofResponseHeader
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProofResponseHeader
     */
    version_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProofResponseHeader
     */
    state?: string;
}

/**
 * 
 * @export
 * @interface DocumentReadAccess
 */
export interface DocumentReadAccess {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentReadAccess
     */
    collaborators?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentResponseHeader
 */
export interface DocumentResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    created_at?: string;
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof DocumentResponseHeader
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof DocumentResponseHeader
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    transaction_id?: string;
}

/**
 * 
 * @export
 * @interface DocumentSignature
 */
export interface DocumentSignature {
    /**
     * 
     * @type {string}
     * @memberof DocumentSignature
     */
    identity?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentSignature
     */
    key?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocumentSignature
     */
    valid?: boolean;
}

/**
 * 
 * @export
 * @interface DocumentWriteAccess
 */
export interface DocumentWriteAccess {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentWriteAccess
     */
    collaborators?: Array<string>;
}

/**
 * 
 * @export
 * @interface EntityAddress
 */
export interface EntityAddress {
    /**
     * 
     * @type {boolean}
     * @memberof EntityAddress
     */
    is_main?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntityAddress
     */
    is_remit_to?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntityAddress
     */
    is_ship_to?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntityAddress
     */
    is_pay_to?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    address_line1?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    address_line2?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityAddress
     */
    contact_person?: string;
}

/**
 * 
 * @export
 * @interface EntityBankPaymentMethod
 */
export interface EntityBankPaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    identifier?: string;
    /**
     * 
     * @type {EntityAddress}
     * @memberof EntityBankPaymentMethod
     */
    address?: EntityAddress;
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    holder_name?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    bank_key?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    bank_account_number?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityBankPaymentMethod
     */
    supported_currency?: string;
}

/**
 * 
 * @export
 * @interface EntityContact
 */
export interface EntityContact {
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityContact
     */
    fax?: string;
}

/**
 * 
 * @export
 * @interface EntityCryptoPaymentMethod
 */
export interface EntityCryptoPaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof EntityCryptoPaymentMethod
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityCryptoPaymentMethod
     */
    to?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityCryptoPaymentMethod
     */
    chain_uri?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityCryptoPaymentMethod
     */
    supported_currency?: string;
}

/**
 * 
 * @export
 * @interface EntityEntityCreatePayload
 */
export interface EntityEntityCreatePayload {
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof EntityEntityCreatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof EntityEntityCreatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {EntityEntityData}
     * @memberof EntityEntityCreatePayload
     */
    data?: EntityEntityData;
}

/**
 * 
 * @export
 * @interface EntityEntityData
 */
export interface EntityEntityData {
    /**
     * 
     * @type {string}
     * @memberof EntityEntityData
     */
    identity?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityEntityData
     */
    legal_name?: string;
    /**
     * 
     * @type {Array<EntityAddress>}
     * @memberof EntityEntityData
     */
    addresses?: Array<EntityAddress>;
    /**
     * 
     * @type {Array<EntityPaymentDetail>}
     * @memberof EntityEntityData
     */
    payment_details?: Array<EntityPaymentDetail>;
    /**
     * 
     * @type {Array<EntityContact>}
     * @memberof EntityEntityData
     */
    contacts?: Array<EntityContact>;
}

/**
 * 
 * @export
 * @interface EntityEntityDataResponse
 */
export interface EntityEntityDataResponse {
    /**
     * 
     * @type {EntityEntityData}
     * @memberof EntityEntityDataResponse
     */
    entity?: EntityEntityData;
    /**
     * 
     * @type {Array<EntityRelationship>}
     * @memberof EntityEntityDataResponse
     */
    relationships?: Array<EntityRelationship>;
}

/**
 * 
 * @export
 * @interface EntityEntityResponse
 */
export interface EntityEntityResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof EntityEntityResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {EntityEntityDataResponse}
     * @memberof EntityEntityResponse
     */
    data?: EntityEntityDataResponse;
}

/**
 * 
 * @export
 * @interface EntityEntityUpdatePayload
 */
export interface EntityEntityUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof EntityEntityUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof EntityEntityUpdatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof EntityEntityUpdatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {EntityEntityData}
     * @memberof EntityEntityUpdatePayload
     */
    data?: EntityEntityData;
}

/**
 * 
 * @export
 * @interface EntityOtherPayment
 */
export interface EntityOtherPayment {
    /**
     * 
     * @type {string}
     * @memberof EntityOtherPayment
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityOtherPayment
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityOtherPayment
     */
    pay_to?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityOtherPayment
     */
    supported_currency?: string;
}

/**
 * 
 * @export
 * @interface EntityPaymentDetail
 */
export interface EntityPaymentDetail {
    /**
     * 
     * @type {boolean}
     * @memberof EntityPaymentDetail
     */
    predefined?: boolean;
    /**
     * 
     * @type {EntityBankPaymentMethod}
     * @memberof EntityPaymentDetail
     */
    bank_payment_method?: EntityBankPaymentMethod;
    /**
     * 
     * @type {EntityCryptoPaymentMethod}
     * @memberof EntityPaymentDetail
     */
    crypto_payment_method?: EntityCryptoPaymentMethod;
    /**
     * 
     * @type {EntityOtherPayment}
     * @memberof EntityPaymentDetail
     */
    other_method?: EntityOtherPayment;
}

/**
 * 
 * @export
 * @interface EntityRelationship
 */
export interface EntityRelationship {
    /**
     * 
     * @type {string}
     * @memberof EntityRelationship
     */
    identity?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EntityRelationship
     */
    active?: boolean;
}

/**
 * 
 * @export
 * @interface EntityRelationshipPayload
 */
export interface EntityRelationshipPayload {
    /**
     * 
     * @type {string}
     * @memberof EntityRelationshipPayload
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityRelationshipPayload
     */
    target_identity?: string;
}

/**
 * 
 * @export
 * @interface EntityrelationshipEntityRelationshipCreatePayload
 */
export interface EntityrelationshipEntityRelationshipCreatePayload {
    /**
     * 
     * @type {EntityrelationshipEntityRelationshipData}
     * @memberof EntityrelationshipEntityRelationshipCreatePayload
     */
    data?: EntityrelationshipEntityRelationshipData;
}

/**
 * 
 * @export
 * @interface EntityrelationshipEntityRelationshipData
 */
export interface EntityrelationshipEntityRelationshipData {
    /**
     * 
     * @type {string}
     * @memberof EntityrelationshipEntityRelationshipData
     */
    owner_identity?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityrelationshipEntityRelationshipData
     */
    target_identity?: string;
}

/**
 * 
 * @export
 * @interface EntityrelationshipEntityRelationshipResponse
 */
export interface EntityrelationshipEntityRelationshipResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof EntityrelationshipEntityRelationshipResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {EntityrelationshipEntityRelationshipData}
     * @memberof EntityrelationshipEntityRelationshipResponse
     */
    data?: EntityrelationshipEntityRelationshipData;
}

/**
 * 
 * @export
 * @interface EntityrelationshipEntityRelationshipUpdatePayload
 */
export interface EntityrelationshipEntityRelationshipUpdatePayload {
    /**
     * 
     * @type {EntityrelationshipEntityRelationshipData}
     * @memberof EntityrelationshipEntityRelationshipUpdatePayload
     */
    data?: EntityrelationshipEntityRelationshipData;
}

/**
 * 
 * @export
 * @interface HealthPong
 */
export interface HealthPong {
    /**
     * 
     * @type {string}
     * @memberof HealthPong
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthPong
     */
    network?: string;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceCreatePayload
 */
export interface InvoiceInvoiceCreatePayload {
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof InvoiceInvoiceCreatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof InvoiceInvoiceCreatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceCreatePayload
     */
    data?: InvoiceInvoiceData;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceData
 */
export interface InvoiceInvoiceData {
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_invoice_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient_invoice_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_state?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_state?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_vat_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    bill_to_local_tax_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_state?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_vat_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_local_tax_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    remit_to_tax_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    ship_to_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    ship_to_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    ship_to_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    ship_to_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    ship_to_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    ship_to_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    ship_to_state?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    ship_to_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    gross_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    net_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    tax_rate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InvoiceInvoiceData
     */
    tax_on_line_level?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    payee?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    shipping_terms?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    requester_email?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    requester_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    delivery_number?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InvoiceInvoiceData
     */
    is_credit_note?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    credit_note_invoice_number?: string;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    credit_for_invoice_date?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    date_due?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    date_paid?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    date_updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    date_created?: Date;
    /**
     * 
     * @type {Array<DocumentBinaryAttachment>}
     * @memberof InvoiceInvoiceData
     */
    attachments?: Array<DocumentBinaryAttachment>;
    /**
     * 
     * @type {Array<InvoiceLineItem>}
     * @memberof InvoiceInvoiceData
     */
    line_items?: Array<InvoiceLineItem>;
    /**
     * 
     * @type {Array<DocumentPaymentDetails>}
     * @memberof InvoiceInvoiceData
     */
    payment_details?: Array<DocumentPaymentDetails>;
    /**
     * 
     * @type {Array<InvoiceTaxItem>}
     * @memberof InvoiceInvoiceData
     */
    tax_items?: Array<InvoiceTaxItem>;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceResponse
 */
export interface InvoiceInvoiceResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof InvoiceInvoiceResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceResponse
     */
    data?: InvoiceInvoiceData;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceUpdatePayload
 */
export interface InvoiceInvoiceUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    data?: InvoiceInvoiceData;
}

/**
 * 
 * @export
 * @interface InvoiceLineItem
 */
export interface InvoiceLineItem {
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    sender_part_no?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    price_per_unit?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    unit_of_measure?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    net_weight?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    tax_rate?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    tax_code?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    total_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    purchase_order_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    purchase_order_item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLineItem
     */
    delivery_note_number?: string;
}

/**
 * 
 * @export
 * @interface InvoiceTaxItem
 */
export interface InvoiceTaxItem {
    /**
     * 
     * @type {string}
     * @memberof InvoiceTaxItem
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceTaxItem
     */
    invoice_item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceTaxItem
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceTaxItem
     */
    tax_rate?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceTaxItem
     */
    tax_code?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceTaxItem
     */
    tax_base_amount?: string;
}

/**
 * 
 * @export
 * @interface NftNFTMintInvoiceUnpaidRequest
 */
export interface NftNFTMintInvoiceUnpaidRequest {
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintInvoiceUnpaidRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintInvoiceUnpaidRequest
     */
    deposit_address?: string;
}

/**
 * 
 * @export
 * @interface NftNFTMintRequest
 */
export interface NftNFTMintRequest {
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    registry_address?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    deposit_address?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NftNFTMintRequest
     */
    proof_fields?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof NftNFTMintRequest
     */
    submit_token_proof?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NftNFTMintRequest
     */
    submit_nft_owner_access_proof?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NftNFTMintRequest
     */
    grant_nft_access?: boolean;
}

/**
 * 
 * @export
 * @interface NftNFTMintResponse
 */
export interface NftNFTMintResponse {
    /**
     * 
     * @type {NftResponseHeader}
     * @memberof NftNFTMintResponse
     */
    header?: NftResponseHeader;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintResponse
     */
    token_id?: string;
}

/**
 * 
 * @export
 * @interface NftResponseHeader
 */
export interface NftResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof NftResponseHeader
     */
    transaction_id?: string;
}

/**
 * 
 * @export
 * @interface NotificationNotificationMessage
 */
export interface NotificationNotificationMessage {
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationMessage
     */
    event_type?: number;
    /**
     * 
     * @type {Date}
     * @memberof NotificationNotificationMessage
     */
    recorded?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    document_type?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    account_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    from_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    to_id?: string;
}

/**
 * 
 * @export
 * @interface PurchaseorderLineItem
 */
export interface PurchaseorderLineItem {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    amount_invoiced?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    amount_total?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    requisition_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    requisition_item?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    part_no?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    price_per_unit?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    unit_of_measure?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    received_quantity?: string;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderLineItem
     */
    date_updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderLineItem
     */
    date_created?: Date;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItem
     */
    revision_number?: string;
    /**
     * 
     * @type {Array<PurchaseorderLineItemActivity>}
     * @memberof PurchaseorderLineItem
     */
    activities?: Array<PurchaseorderLineItemActivity>;
    /**
     * 
     * @type {Array<PurchaseorderTaxItem>}
     * @memberof PurchaseorderLineItem
     */
    tax_items?: Array<PurchaseorderTaxItem>;
}

/**
 * 
 * @export
 * @interface PurchaseorderLineItemActivity
 */
export interface PurchaseorderLineItemActivity {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItemActivity
     */
    item_number?: string;
    /**
     * delivered, returned, credited, invoiced, paid, ...
     * @type {string}
     * @memberof PurchaseorderLineItemActivity
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItemActivity
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItemActivity
     */
    amount?: string;
    /**
     * depending on status delivery note, invoice, ...
     * @type {string}
     * @memberof PurchaseorderLineItemActivity
     */
    reference_document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderLineItemActivity
     */
    reference_document_item?: string;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderLineItemActivity
     */
    date?: Date;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderCreatePayload
 */
export interface PurchaseorderPurchaseOrderCreatePayload {
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof PurchaseorderPurchaseOrderCreatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof PurchaseorderPurchaseOrderCreatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderCreatePayload
     */
    data?: PurchaseorderPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderData
 */
export interface PurchaseorderPurchaseOrderData {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    number?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    sender_order_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient_order_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    requisition_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    requester_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    requester_email?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    ship_to_company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    ship_to_contact_person_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    ship_to_street1?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    ship_to_street2?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    ship_to_city?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    ship_to_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    ship_to_state?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    ship_to_country?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    payment_terms?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    total_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    comment?: string;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderPurchaseOrderData
     */
    date_sent?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderPurchaseOrderData
     */
    date_confirmed?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderPurchaseOrderData
     */
    date_updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderPurchaseOrderData
     */
    date_created?: Date;
    /**
     * 
     * @type {Array<DocumentBinaryAttachment>}
     * @memberof PurchaseorderPurchaseOrderData
     */
    attachments?: Array<DocumentBinaryAttachment>;
    /**
     * 
     * @type {Array<PurchaseorderLineItem>}
     * @memberof PurchaseorderPurchaseOrderData
     */
    line_items?: Array<PurchaseorderLineItem>;
    /**
     * 
     * @type {Array<DocumentPaymentDetails>}
     * @memberof PurchaseorderPurchaseOrderData
     */
    payment_details?: Array<DocumentPaymentDetails>;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderResponse
 */
export interface PurchaseorderPurchaseOrderResponse {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof PurchaseorderPurchaseOrderResponse
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderResponse
     */
    data?: PurchaseorderPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderUpdatePayload
 */
export interface PurchaseorderPurchaseOrderUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {DocumentReadAccess}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    read_access?: DocumentReadAccess;
    /**
     * 
     * @type {DocumentWriteAccess}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    write_access?: DocumentWriteAccess;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    data?: PurchaseorderPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PurchaseorderTaxItem
 */
export interface PurchaseorderTaxItem {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderTaxItem
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderTaxItem
     */
    purchase_order_item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderTaxItem
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderTaxItem
     */
    tax_rate?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderTaxItem
     */
    tax_code?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderTaxItem
     */
    tax_base_amount?: string;
}

/**
 * 
 * @export
 * @interface TransactionsTransactionStatusResponse
 */
export interface TransactionsTransactionStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof TransactionsTransactionStatusResponse
     */
    transaction_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionsTransactionStatusResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionsTransactionStatusResponse
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof TransactionsTransactionStatusResponse
     */
    last_updated?: Date;
}


/**
 * AccountServiceApi - fetch parameter creator
 * @export
 */
export const AccountServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createAccount.');
            }
            const localVarPath = `/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountAccountData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling generateAccount.');
            }
            const localVarPath = `/accounts/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getAccount.');
            }
            const localVarPath = `/accounts/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getAllAccounts.');
            }
            const localVarPath = `/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling updateAccount.');
            }
            const localVarPath = `/accounts/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountUpdateAccountRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountServiceApi - functional programming interface
 * @export
 */
export const AccountServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).createAccount(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).generateAccount(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).getAccount(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountGetAllAccountResponse> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).getAllAccounts(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).updateAccount(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountServiceApi - factory interface
 * @export
 */
export const AccountServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).createAccount(body, authorization, options)(fetch, basePath);
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).generateAccount(authorization, options)(fetch, basePath);
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).getAccount(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).getAllAccounts(authorization, options)(fetch, basePath);
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).updateAccount(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * AccountServiceApi - object-oriented interface
 * @export
 * @class AccountServiceApi
 * @extends {BaseAPI}
 */
export class AccountServiceApi extends BaseAPI {
    /**
     * Creates an Account
     * @param {AccountAccountData} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public createAccount(body: AccountAccountData, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).createAccount(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Generates an Account taking defaults based on the main account
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public generateAccount(authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).generateAccount(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get Account
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public getAccount(identifier: string, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).getAccount(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get All Accounts
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public getAllAccounts(authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).getAllAccounts(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an Account
     * @param {string} identifier 
     * @param {AccountUpdateAccountRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).updateAccount(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * ConfigServiceApi - fetch parameter creator
 * @export
 */
export const ConfigServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Node Config
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getConfig.');
            }
            const localVarPath = `/config`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigServiceApi - functional programming interface
 * @export
 */
export const ConfigServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Node Config
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConfigConfigData> {
            const localVarFetchArgs = ConfigServiceApiFetchParamCreator(configuration).getConfig(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConfigServiceApi - factory interface
 * @export
 */
export const ConfigServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get Node Config
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(authorization: string, options?: any) {
            return ConfigServiceApiFp(configuration).getConfig(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * ConfigServiceApi - object-oriented interface
 * @export
 * @class ConfigServiceApi
 * @extends {BaseAPI}
 */
export class ConfigServiceApi extends BaseAPI {
    /**
     * Get Node Config
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigServiceApi
     */
    public getConfig(authorization: string, options?: any) {
        return ConfigServiceApiFp(this.configuration).getConfig(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * DocumentServiceApi - fetch parameter creator
 * @export
 */
export const DocumentServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createDocumentProof.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocumentProof.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createDocumentProof.');
            }
            const localVarPath = `/document/{identifier}/proof`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DocumentCreateDocumentProofRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createDocumentProofForVersion.');
            }
            const localVarPath = `/document/{identifier}/{version}/proof`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DocumentCreateDocumentProofForVersionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentServiceApi - functional programming interface
 * @export
 */
export const DocumentServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentDocumentProof> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).createDocumentProof(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentDocumentProof> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).createDocumentProofForVersion(identifier, version, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DocumentServiceApi - factory interface
 * @export
 */
export const DocumentServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).createDocumentProof(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).createDocumentProofForVersion(identifier, version, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * DocumentServiceApi - object-oriented interface
 * @export
 * @class DocumentServiceApi
 * @extends {BaseAPI}
 */
export class DocumentServiceApi extends BaseAPI {
    /**
     * Creates a list of precise proofs for the specified fields of the document given by ID
     * @param {string} identifier 
     * @param {DocumentCreateDocumentProofRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).createDocumentProof(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
     * @param {string} identifier 
     * @param {string} version 
     * @param {DocumentCreateDocumentProofForVersionRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).createDocumentProofForVersion(identifier, version, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * EntityServiceApi - fetch parameter creator
 * @export
 */
export const EntityServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an entity
         * @param {EntityEntityCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: EntityEntityCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create.');
            }
            const localVarPath = `/entity`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityEntityCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current entity
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get.');
            }
            const localVarPath = `/entity/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of an entity
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getVersion.');
            }
            const localVarPath = `/entity/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get entity data
         * @param {string} owner_identity 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {string} [target_identity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_1(owner_identity: string, authorization: string, target_identity?: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner_identity' is not null or undefined
            if (owner_identity === null || owner_identity === undefined) {
                throw new RequiredError('owner_identity','Required parameter owner_identity was null or undefined when calling get_1.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get_1.');
            }
            const localVarPath = `/entityrelationship/{owner_identity}`
                .replace(`{${"owner_identity"}}`, encodeURIComponent(String(owner_identity)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (target_identity !== undefined) {
                localVarQueryParameter['target_identity'] = target_identity;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * revoke an entity document share
         * @summary Entity Relation Revoke
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke(identifier: string, body: EntityRelationshipPayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling revoke.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling revoke.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling revoke.');
            }
            const localVarPath = `/entity/{identifier}/revoke`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityRelationshipPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revokes the access token for the target identity on the relevant entity relationship
         * @param {string} data_owner_identity 
         * @param {string} data_target_identity 
         * @param {EntityrelationshipEntityRelationshipUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke_2(data_owner_identity: string, data_target_identity: string, body: EntityrelationshipEntityRelationshipUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'data_owner_identity' is not null or undefined
            if (data_owner_identity === null || data_owner_identity === undefined) {
                throw new RequiredError('data_owner_identity','Required parameter data_owner_identity was null or undefined when calling revoke_2.');
            }
            // verify required parameter 'data_target_identity' is not null or undefined
            if (data_target_identity === null || data_target_identity === undefined) {
                throw new RequiredError('data_target_identity','Required parameter data_target_identity was null or undefined when calling revoke_2.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling revoke_2.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling revoke_2.');
            }
            const localVarPath = `/entity/{data.owner_identity}/{data.target_identity}`
                .replace(`{${"data.owner_identity"}}`, encodeURIComponent(String(data_owner_identity)))
                .replace(`{${"data.target_identity"}}`, encodeURIComponent(String(data_target_identity)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityrelationshipEntityRelationshipUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Share the entity document with others
         * @summary Entity Relation Share
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share(identifier: string, body: EntityRelationshipPayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling share.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling share.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling share.');
            }
            const localVarPath = `/entity/{identifier}/share`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityRelationshipPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an entity relationship
         * @param {string} data_owner_identity 
         * @param {string} data_target_identity 
         * @param {EntityrelationshipEntityRelationshipCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share_3(data_owner_identity: string, data_target_identity: string, body: EntityrelationshipEntityRelationshipCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'data_owner_identity' is not null or undefined
            if (data_owner_identity === null || data_owner_identity === undefined) {
                throw new RequiredError('data_owner_identity','Required parameter data_owner_identity was null or undefined when calling share_3.');
            }
            // verify required parameter 'data_target_identity' is not null or undefined
            if (data_target_identity === null || data_target_identity === undefined) {
                throw new RequiredError('data_target_identity','Required parameter data_target_identity was null or undefined when calling share_3.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling share_3.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling share_3.');
            }
            const localVarPath = `/entity/{data.owner_identity}/share/{data.target_identity}`
                .replace(`{${"data.owner_identity"}}`, encodeURIComponent(String(data_owner_identity)))
                .replace(`{${"data.target_identity"}}`, encodeURIComponent(String(data_target_identity)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityrelationshipEntityRelationshipCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an entity
         * @param {string} identifier 
         * @param {EntityEntityUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: EntityEntityUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update.');
            }
            const localVarPath = `/entity/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityEntityUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntityServiceApi - functional programming interface
 * @export
 */
export const EntityServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an entity
         * @param {EntityEntityCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: EntityEntityCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).create(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current entity
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).get(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of an entity
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).getVersion(identifier, version, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get entity data
         * @param {string} owner_identity 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {string} [target_identity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_1(owner_identity: string, authorization: string, target_identity?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityData> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).get_1(owner_identity, authorization, target_identity, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * revoke an entity document share
         * @summary Entity Relation Revoke
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).revoke(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Revokes the access token for the target identity on the relevant entity relationship
         * @param {string} data_owner_identity 
         * @param {string} data_target_identity 
         * @param {EntityrelationshipEntityRelationshipUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke_2(data_owner_identity: string, data_target_identity: string, body: EntityrelationshipEntityRelationshipUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityrelationshipEntityRelationshipResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).revoke_2(data_owner_identity, data_target_identity, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Share the entity document with others
         * @summary Entity Relation Share
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).share(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates an entity relationship
         * @param {string} data_owner_identity 
         * @param {string} data_target_identity 
         * @param {EntityrelationshipEntityRelationshipCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share_3(data_owner_identity: string, data_target_identity: string, body: EntityrelationshipEntityRelationshipCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityrelationshipEntityRelationshipResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).share_3(data_owner_identity, data_target_identity, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an entity
         * @param {string} identifier 
         * @param {EntityEntityUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: EntityEntityUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EntityEntityResponse> {
            const localVarFetchArgs = EntityServiceApiFetchParamCreator(configuration).update(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EntityServiceApi - factory interface
 * @export
 */
export const EntityServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an entity
         * @param {EntityEntityCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: EntityEntityCreatePayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).create(body, authorization, options)(fetch, basePath);
        },
        /**
         * Get the current entity
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).get(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get a specific version of an entity
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).getVersion(identifier, version, authorization, options)(fetch, basePath);
        },
        /**
         * Get entity data
         * @param {string} owner_identity 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {string} [target_identity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_1(owner_identity: string, authorization: string, target_identity?: string, options?: any) {
            return EntityServiceApiFp(configuration).get_1(owner_identity, authorization, target_identity, options)(fetch, basePath);
        },
        /**
         * revoke an entity document share
         * @summary Entity Relation Revoke
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).revoke(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Revokes the access token for the target identity on the relevant entity relationship
         * @param {string} data_owner_identity 
         * @param {string} data_target_identity 
         * @param {EntityrelationshipEntityRelationshipUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke_2(data_owner_identity: string, data_target_identity: string, body: EntityrelationshipEntityRelationshipUpdatePayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).revoke_2(data_owner_identity, data_target_identity, body, authorization, options)(fetch, basePath);
        },
        /**
         * Share the entity document with others
         * @summary Entity Relation Share
         * @param {string} identifier entity identifier
         * @param {EntityRelationshipPayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).share(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Creates an entity relationship
         * @param {string} data_owner_identity 
         * @param {string} data_target_identity 
         * @param {EntityrelationshipEntityRelationshipCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        share_3(data_owner_identity: string, data_target_identity: string, body: EntityrelationshipEntityRelationshipCreatePayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).share_3(data_owner_identity, data_target_identity, body, authorization, options)(fetch, basePath);
        },
        /**
         * Updates an entity
         * @param {string} identifier 
         * @param {EntityEntityUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: EntityEntityUpdatePayload, authorization: string, options?: any) {
            return EntityServiceApiFp(configuration).update(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * EntityServiceApi - object-oriented interface
 * @export
 * @class EntityServiceApi
 * @extends {BaseAPI}
 */
export class EntityServiceApi extends BaseAPI {
    /**
     * Creates an entity
     * @param {EntityEntityCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public create(body: EntityEntityCreatePayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).create(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current entity
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public get(identifier: string, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).get(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of an entity
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public getVersion(identifier: string, version: string, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).getVersion(identifier, version, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get entity data
     * @param {string} owner_identity 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {string} [target_identity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public get_1(owner_identity: string, authorization: string, target_identity?: string, options?: any) {
        return EntityServiceApiFp(this.configuration).get_1(owner_identity, authorization, target_identity, options)(this.fetch, this.basePath);
    }

    /**
     * revoke an entity document share
     * @summary Entity Relation Revoke
     * @param {string} identifier entity identifier
     * @param {EntityRelationshipPayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public revoke(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).revoke(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Revokes the access token for the target identity on the relevant entity relationship
     * @param {string} data_owner_identity 
     * @param {string} data_target_identity 
     * @param {EntityrelationshipEntityRelationshipUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public revoke_2(data_owner_identity: string, data_target_identity: string, body: EntityrelationshipEntityRelationshipUpdatePayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).revoke_2(data_owner_identity, data_target_identity, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Share the entity document with others
     * @summary Entity Relation Share
     * @param {string} identifier entity identifier
     * @param {EntityRelationshipPayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public share(identifier: string, body: EntityRelationshipPayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).share(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Creates an entity relationship
     * @param {string} data_owner_identity 
     * @param {string} data_target_identity 
     * @param {EntityrelationshipEntityRelationshipCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public share_3(data_owner_identity: string, data_target_identity: string, body: EntityrelationshipEntityRelationshipCreatePayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).share_3(data_owner_identity, data_target_identity, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an entity
     * @param {string} identifier 
     * @param {EntityEntityUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityServiceApi
     */
    public update(identifier: string, body: EntityEntityUpdatePayload, authorization: string, options?: any) {
        return EntityServiceApiFp(this.configuration).update(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * HealthCheckServiceApi - fetch parameter creator
 * @export
 */
export const HealthCheckServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check for the Node
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling ping.');
            }
            const localVarPath = `/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckServiceApi - functional programming interface
 * @export
 */
export const HealthCheckServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Health check for the Node
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HealthPong> {
            const localVarFetchArgs = HealthCheckServiceApiFetchParamCreator(configuration).ping(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HealthCheckServiceApi - factory interface
 * @export
 */
export const HealthCheckServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Health check for the Node
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(authorization: string, options?: any) {
            return HealthCheckServiceApiFp(configuration).ping(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * HealthCheckServiceApi - object-oriented interface
 * @export
 * @class HealthCheckServiceApi
 * @extends {BaseAPI}
 */
export class HealthCheckServiceApi extends BaseAPI {
    /**
     * Health check for the Node
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckServiceApi
     */
    public ping(authorization: string, options?: any) {
        return HealthCheckServiceApiFp(this.configuration).ping(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * InvoiceServiceApi - fetch parameter creator
 * @export
 */
export const InvoiceServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create.');
            }
            const localVarPath = `/invoice`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InvoiceInvoiceCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get.');
            }
            const localVarPath = `/invoice/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getVersion.');
            }
            const localVarPath = `/invoice/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update.');
            }
            const localVarPath = `/invoice/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InvoiceInvoiceUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoiceServiceApi - functional programming interface
 * @export
 */
export const InvoiceServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = InvoiceServiceApiFetchParamCreator(configuration).create(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = InvoiceServiceApiFetchParamCreator(configuration).get(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = InvoiceServiceApiFetchParamCreator(configuration).getVersion(identifier, version, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = InvoiceServiceApiFetchParamCreator(configuration).update(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InvoiceServiceApi - factory interface
 * @export
 */
export const InvoiceServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, authorization: string, options?: any) {
            return InvoiceServiceApiFp(configuration).create(body, authorization, options)(fetch, basePath);
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any) {
            return InvoiceServiceApiFp(configuration).get(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any) {
            return InvoiceServiceApiFp(configuration).getVersion(identifier, version, authorization, options)(fetch, basePath);
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, authorization: string, options?: any) {
            return InvoiceServiceApiFp(configuration).update(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * InvoiceServiceApi - object-oriented interface
 * @export
 * @class InvoiceServiceApi
 * @extends {BaseAPI}
 */
export class InvoiceServiceApi extends BaseAPI {
    /**
     * Creates an invoice
     * @param {InvoiceInvoiceCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceServiceApi
     */
    public create(body: InvoiceInvoiceCreatePayload, authorization: string, options?: any) {
        return InvoiceServiceApiFp(this.configuration).create(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current invoice
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceServiceApi
     */
    public get(identifier: string, authorization: string, options?: any) {
        return InvoiceServiceApiFp(this.configuration).get(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of an invoice
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceServiceApi
     */
    public getVersion(identifier: string, version: string, authorization: string, options?: any) {
        return InvoiceServiceApiFp(this.configuration).getVersion(identifier, version, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an invoice
     * @param {string} identifier 
     * @param {InvoiceInvoiceUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceServiceApi
     */
    public update(identifier: string, body: InvoiceInvoiceUpdatePayload, authorization: string, options?: any) {
        return InvoiceServiceApiFp(this.configuration).update(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * NFTServiceApi - fetch parameter creator
 * @export
 */
export const NFTServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mints an NFT out of an Unpaid Centrifuge Invoice
         * @param {string} identifier Invoice Document identifier
         * @param {NftNFTMintInvoiceUnpaidRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintInvoiceUnpaidNFT(identifier: string, body: NftNFTMintInvoiceUnpaidRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling mintInvoiceUnpaidNFT.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mintInvoiceUnpaidNFT.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling mintInvoiceUnpaidNFT.');
            }
            const localVarPath = `/token/mint/invoice/unpaid/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NftNFTMintInvoiceUnpaidRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mintNFT.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling mintNFT.');
            }
            const localVarPath = `/token/mint`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NftNFTMintRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NFTServiceApi - functional programming interface
 * @export
 */
export const NFTServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Mints an NFT out of an Unpaid Centrifuge Invoice
         * @param {string} identifier Invoice Document identifier
         * @param {NftNFTMintInvoiceUnpaidRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintInvoiceUnpaidNFT(identifier: string, body: NftNFTMintInvoiceUnpaidRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NftNFTMintResponse> {
            const localVarFetchArgs = NFTServiceApiFetchParamCreator(configuration).mintInvoiceUnpaidNFT(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NftNFTMintResponse> {
            const localVarFetchArgs = NFTServiceApiFetchParamCreator(configuration).mintNFT(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NFTServiceApi - factory interface
 * @export
 */
export const NFTServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Mints an NFT out of an Unpaid Centrifuge Invoice
         * @param {string} identifier Invoice Document identifier
         * @param {NftNFTMintInvoiceUnpaidRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintInvoiceUnpaidNFT(identifier: string, body: NftNFTMintInvoiceUnpaidRequest, authorization: string, options?: any) {
            return NFTServiceApiFp(configuration).mintInvoiceUnpaidNFT(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options?: any) {
            return NFTServiceApiFp(configuration).mintNFT(body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * NFTServiceApi - object-oriented interface
 * @export
 * @class NFTServiceApi
 * @extends {BaseAPI}
 */
export class NFTServiceApi extends BaseAPI {
    /**
     * Mints an NFT out of an Unpaid Centrifuge Invoice
     * @param {string} identifier Invoice Document identifier
     * @param {NftNFTMintInvoiceUnpaidRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTServiceApi
     */
    public mintInvoiceUnpaidNFT(identifier: string, body: NftNFTMintInvoiceUnpaidRequest, authorization: string, options?: any) {
        return NFTServiceApiFp(this.configuration).mintInvoiceUnpaidNFT(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Mint an NFT from a Centrifuge Document
     * @param {NftNFTMintRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTServiceApi
     */
    public mintNFT(body: NftNFTMintRequest, authorization: string, options?: any) {
        return NFTServiceApiFp(this.configuration).mintNFT(body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * NotificationDummyServiceApi - fetch parameter creator
 * @export
 */
export const NotificationDummyServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling notify.');
            }
            const localVarPath = `/dummy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationDummyServiceApi - functional programming interface
 * @export
 */
export const NotificationDummyServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationNotificationMessage> {
            const localVarFetchArgs = NotificationDummyServiceApiFetchParamCreator(configuration).notify(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationDummyServiceApi - factory interface
 * @export
 */
export const NotificationDummyServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options?: any) {
            return NotificationDummyServiceApiFp(configuration).notify(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationDummyServiceApi - object-oriented interface
 * @export
 * @class NotificationDummyServiceApi
 * @extends {BaseAPI}
 */
export class NotificationDummyServiceApi extends BaseAPI {
    /**
     * Dummy notification endpoint
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationDummyServiceApi
     */
    public notify(authorization: string, options?: any) {
        return NotificationDummyServiceApiFp(this.configuration).notify(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * PurchaseOrderServiceApi - fetch parameter creator
 * @export
 */
export const PurchaseOrderServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: PurchaseorderPurchaseOrderCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create.');
            }
            const localVarPath = `/purchaseorder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PurchaseorderPurchaseOrderCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get.');
            }
            const localVarPath = `/purchaseorder/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getVersion.');
            }
            const localVarPath = `/purchaseorder/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update.');
            }
            const localVarPath = `/purchaseorder/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PurchaseorderPurchaseOrderUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseOrderServiceApi - functional programming interface
 * @export
 */
export const PurchaseOrderServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: PurchaseorderPurchaseOrderCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = PurchaseOrderServiceApiFetchParamCreator(configuration).create(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = PurchaseOrderServiceApiFetchParamCreator(configuration).get(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = PurchaseOrderServiceApiFetchParamCreator(configuration).getVersion(identifier, version, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = PurchaseOrderServiceApiFetchParamCreator(configuration).update(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PurchaseOrderServiceApi - factory interface
 * @export
 */
export const PurchaseOrderServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: PurchaseorderPurchaseOrderCreatePayload, authorization: string, options?: any) {
            return PurchaseOrderServiceApiFp(configuration).create(body, authorization, options)(fetch, basePath);
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any) {
            return PurchaseOrderServiceApiFp(configuration).get(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any) {
            return PurchaseOrderServiceApiFp(configuration).getVersion(identifier, version, authorization, options)(fetch, basePath);
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, authorization: string, options?: any) {
            return PurchaseOrderServiceApiFp(configuration).update(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * PurchaseOrderServiceApi - object-oriented interface
 * @export
 * @class PurchaseOrderServiceApi
 * @extends {BaseAPI}
 */
export class PurchaseOrderServiceApi extends BaseAPI {
    /**
     * Creates a purchase order
     * @param {PurchaseorderPurchaseOrderCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseOrderServiceApi
     */
    public create(body: PurchaseorderPurchaseOrderCreatePayload, authorization: string, options?: any) {
        return PurchaseOrderServiceApiFp(this.configuration).create(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current version of a purchase order
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseOrderServiceApi
     */
    public get(identifier: string, authorization: string, options?: any) {
        return PurchaseOrderServiceApiFp(this.configuration).get(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of a purchase order
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseOrderServiceApi
     */
    public getVersion(identifier: string, version: string, authorization: string, options?: any) {
        return PurchaseOrderServiceApiFp(this.configuration).getVersion(identifier, version, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates a purchase order
     * @param {string} identifier 
     * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseOrderServiceApi
     */
    public update(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, authorization: string, options?: any) {
        return PurchaseOrderServiceApiFp(this.configuration).update(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * TransactionServiceApi - fetch parameter creator
 * @export
 */
export const TransactionServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Transaction Status
         * @param {string} transaction_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionStatus(transaction_id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'transaction_id' is not null or undefined
            if (transaction_id === null || transaction_id === undefined) {
                throw new RequiredError('transaction_id','Required parameter transaction_id was null or undefined when calling getTransactionStatus.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getTransactionStatus.');
            }
            const localVarPath = `/transactions/{transaction_id}`
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transaction_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionServiceApi - functional programming interface
 * @export
 */
export const TransactionServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Transaction Status
         * @param {string} transaction_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionStatus(transaction_id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionsTransactionStatusResponse> {
            const localVarFetchArgs = TransactionServiceApiFetchParamCreator(configuration).getTransactionStatus(transaction_id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TransactionServiceApi - factory interface
 * @export
 */
export const TransactionServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get Transaction Status
         * @param {string} transaction_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionStatus(transaction_id: string, authorization: string, options?: any) {
            return TransactionServiceApiFp(configuration).getTransactionStatus(transaction_id, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * TransactionServiceApi - object-oriented interface
 * @export
 * @class TransactionServiceApi
 * @extends {BaseAPI}
 */
export class TransactionServiceApi extends BaseAPI {
    /**
     * Get Transaction Status
     * @param {string} transaction_id 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionServiceApi
     */
    public getTransactionStatus(transaction_id: string, authorization: string, options?: any) {
        return TransactionServiceApiFp(this.configuration).getTransactionStatus(transaction_id, authorization, options)(this.fetch, this.basePath);
    }

}

