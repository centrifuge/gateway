/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Centrifuge OS Node API
 *  
 *
 * OpenAPI spec version: 0.0.3
 * Contact: hello@centrifuge.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountAccountData
 */
export interface AccountAccountData {
    /**
     * 
     * @type {AccountEthereumAccount}
     * @memberof AccountAccountData
     */
    eth_account?: AccountEthereumAccount;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    eth_default_account_name?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    receive_event_notification_endpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccountData
     */
    identity_id?: string;
    /**
     * 
     * @type {AccountKeyPair}
     * @memberof AccountAccountData
     */
    signing_key_pair?: AccountKeyPair;
    /**
     * 
     * @type {AccountKeyPair}
     * @memberof AccountAccountData
     */
    ethauth_key_pair?: AccountKeyPair;
    /**
     * 
     * @type {AccountKeyPair}
     * @memberof AccountAccountData
     */
    p2p_key_pair?: AccountKeyPair;
}

/**
 * 
 * @export
 * @interface AccountEthereumAccount
 */
export interface AccountEthereumAccount {
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountEthereumAccount
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface AccountGetAllAccountResponse
 */
export interface AccountGetAllAccountResponse {
    /**
     * 
     * @type {Array<AccountAccountData>}
     * @memberof AccountGetAllAccountResponse
     */
    data?: Array<AccountAccountData>;
}

/**
 * 
 * @export
 * @interface AccountKeyPair
 */
export interface AccountKeyPair {
    /**
     * 
     * @type {string}
     * @memberof AccountKeyPair
     */
    pub?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountKeyPair
     */
    pvt?: string;
}

/**
 * 
 * @export
 * @interface AccountUpdateAccountRequest
 */
export interface AccountUpdateAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateAccountRequest
     */
    identifier?: string;
    /**
     * 
     * @type {AccountAccountData}
     * @memberof AccountUpdateAccountRequest
     */
    data?: AccountAccountData;
}

/**
 * 
 * @export
 * @interface ConfigConfigData
 */
export interface ConfigConfigData {
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    storage_path?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    p2p_port?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    p2p_external_ip?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    p2p_connection_timeout?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    server_port?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    server_address?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    num_workers?: number;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    worker_wait_time_ms?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_node_url?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_context_read_wait_timeout?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_context_wait_timeout?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_interval_retry?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    eth_max_retries?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_gas_price?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    eth_gas_limit?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigConfigData
     */
    tx_pool_enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConfigConfigData
     */
    network?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConfigConfigData
     */
    bootstrap_peers?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ConfigConfigData
     */
    network_id?: number;
    /**
     * 
     * @type {AccountAccountData}
     * @memberof ConfigConfigData
     */
    main_identity?: AccountAccountData;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ConfigConfigData
     */
    smart_contract_addresses?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof ConfigConfigData
     */
    pprof_enabled?: boolean;
}

/**
 * 
 * @export
 * @interface DocumentAccessTokenParams
 */
export interface DocumentAccessTokenParams {
    /**
     * 
     * @type {string}
     * @memberof DocumentAccessTokenParams
     */
    grantee?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentAccessTokenParams
     */
    document_identifier?: string;
}

/**
 * 
 * @export
 * @interface DocumentCreateDocumentProofForVersionRequest
 */
export interface DocumentCreateDocumentProofForVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    version?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentCreateDocumentProofRequest
 */
export interface DocumentCreateDocumentProofRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofRequest
     */
    type?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentCreateDocumentProofRequest
     */
    fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentDocumentProof
 */
export interface DocumentDocumentProof {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof DocumentDocumentProof
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {Array<DocumentProof>}
     * @memberof DocumentDocumentProof
     */
    field_proofs?: Array<DocumentProof>;
}

/**
 * 
 * @export
 * @interface DocumentProof
 */
export interface DocumentProof {
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    property?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    salt?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    hash?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentProof
     */
    sorted_hashes?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentResponseHeader
 */
export interface DocumentResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    version_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    state?: string;
}

/**
 * 
 * @export
 * @interface DocumentUpdateAccessTokenPayload
 */
export interface DocumentUpdateAccessTokenPayload {
    /**
     * 
     * @type {string}
     * @memberof DocumentUpdateAccessTokenPayload
     */
    delegating_document_identifier?: string;
    /**
     * 
     * @type {DocumentAccessTokenParams}
     * @memberof DocumentUpdateAccessTokenPayload
     */
    access_token_params?: DocumentAccessTokenParams;
}

/**
 * 
 * @export
 * @interface HealthPong
 */
export interface HealthPong {
    /**
     * 
     * @type {string}
     * @memberof HealthPong
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthPong
     */
    network?: string;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceCreatePayload
 */
export interface InvoiceInvoiceCreatePayload {
    /**
     * 
     * @type {Array<string>}
     * @memberof InvoiceInvoiceCreatePayload
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceCreatePayload
     */
    data?: InvoiceInvoiceData;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceData
 */
export interface InvoiceInvoiceData {
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    invoice_status?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    invoice_number?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_street?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient_name?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient_street?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient_city?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient_country?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    gross_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    net_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    tax_rate?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    payee?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    comment?: string;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    due_date?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    date_created?: Date;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    extra_data?: string;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceResponse
 */
export interface InvoiceInvoiceResponse {
    /**
     * 
     * @type {InvoiceResponseHeader}
     * @memberof InvoiceInvoiceResponse
     */
    header?: InvoiceResponseHeader;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceResponse
     */
    data?: InvoiceInvoiceData;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceUpdatePayload
 */
export interface InvoiceInvoiceUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    data?: InvoiceInvoiceData;
    /**
     * 
     * @type {DocumentUpdateAccessTokenPayload}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    access_token_payload?: DocumentUpdateAccessTokenPayload;
}

/**
 * 
 * @export
 * @interface InvoiceResponseHeader
 */
export interface InvoiceResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponseHeader
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponseHeader
     */
    version_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponseHeader
     */
    state?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InvoiceResponseHeader
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponseHeader
     */
    transaction_id?: string;
}

/**
 * 
 * @export
 * @interface NftNFTMintRequest
 */
export interface NftNFTMintRequest {
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    registry_address?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    deposit_address?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NftNFTMintRequest
     */
    proof_fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface NftNFTMintResponse
 */
export interface NftNFTMintResponse {
    /**
     * 
     * @type {NftResponseHeader}
     * @memberof NftNFTMintResponse
     */
    header?: NftResponseHeader;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintResponse
     */
    token_id?: string;
}

/**
 * 
 * @export
 * @interface NftResponseHeader
 */
export interface NftResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof NftResponseHeader
     */
    transaction_id?: string;
}

/**
 * 
 * @export
 * @interface NotificationNotificationMessage
 */
export interface NotificationNotificationMessage {
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationMessage
     */
    event_type?: number;
    /**
     * 
     * @type {Date}
     * @memberof NotificationNotificationMessage
     */
    recorded?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    document_type?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    account_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    from_id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    to_id?: string;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderCreatePayload
 */
export interface PurchaseorderPurchaseOrderCreatePayload {
    /**
     * 
     * @type {Array<string>}
     * @memberof PurchaseorderPurchaseOrderCreatePayload
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderCreatePayload
     */
    data?: PurchaseorderPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderData
 */
export interface PurchaseorderPurchaseOrderData {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    po_status?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    po_number?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order_street?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order_city?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order_country?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient_name?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient_street?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient_city?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient_zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient_country?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    net_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    tax_amount?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    tax_rate?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order_contact?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    comment?: string;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderPurchaseOrderData
     */
    delivery_date?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderPurchaseOrderData
     */
    date_created?: Date;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    extra_data?: string;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderResponse
 */
export interface PurchaseorderPurchaseOrderResponse {
    /**
     * 
     * @type {PurchaseorderResponseHeader}
     * @memberof PurchaseorderPurchaseOrderResponse
     */
    header?: PurchaseorderResponseHeader;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderResponse
     */
    data?: PurchaseorderPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderUpdatePayload
 */
export interface PurchaseorderPurchaseOrderUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    data?: PurchaseorderPurchaseOrderData;
    /**
     * 
     * @type {DocumentUpdateAccessTokenPayload}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    access_token_payload?: DocumentUpdateAccessTokenPayload;
}

/**
 * 
 * @export
 * @interface PurchaseorderResponseHeader
 */
export interface PurchaseorderResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderResponseHeader
     */
    document_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderResponseHeader
     */
    version_id?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderResponseHeader
     */
    state?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PurchaseorderResponseHeader
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderResponseHeader
     */
    transaction_id?: string;
}

/**
 * 
 * @export
 * @interface TransactionsTransactionStatusResponse
 */
export interface TransactionsTransactionStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof TransactionsTransactionStatusResponse
     */
    transaction_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionsTransactionStatusResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionsTransactionStatusResponse
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof TransactionsTransactionStatusResponse
     */
    last_updated?: Date;
}


/**
 * AccountServiceApi - fetch parameter creator
 * @export
 */
export const AccountServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createAccount.');
            }
            const localVarPath = `/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountAccountData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling generateAccount.');
            }
            const localVarPath = `/accounts/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getAccount.');
            }
            const localVarPath = `/accounts/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getAllAccounts.');
            }
            const localVarPath = `/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAccount.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling updateAccount.');
            }
            const localVarPath = `/accounts/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountUpdateAccountRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountServiceApi - functional programming interface
 * @export
 */
export const AccountServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).createAccount(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).generateAccount(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).getAccount(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountGetAllAccountResponse> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).getAllAccounts(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAccountData> {
            const localVarFetchArgs = AccountServiceApiFetchParamCreator(configuration).updateAccount(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountServiceApi - factory interface
 * @export
 */
export const AccountServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an Account
         * @param {AccountAccountData} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(body: AccountAccountData, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).createAccount(body, authorization, options)(fetch, basePath);
        },
        /**
         * Generates an Account taking defaults based on the main account
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAccount(authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).generateAccount(authorization, options)(fetch, basePath);
        },
        /**
         * Get Account
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(identifier: string, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).getAccount(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get All Accounts
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccounts(authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).getAllAccounts(authorization, options)(fetch, basePath);
        },
        /**
         * Updates an Account
         * @param {string} identifier 
         * @param {AccountUpdateAccountRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any) {
            return AccountServiceApiFp(configuration).updateAccount(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * AccountServiceApi - object-oriented interface
 * @export
 * @class AccountServiceApi
 * @extends {BaseAPI}
 */
export class AccountServiceApi extends BaseAPI {
    /**
     * Creates an Account
     * @param {AccountAccountData} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public createAccount(body: AccountAccountData, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).createAccount(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Generates an Account taking defaults based on the main account
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public generateAccount(authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).generateAccount(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get Account
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public getAccount(identifier: string, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).getAccount(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get All Accounts
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public getAllAccounts(authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).getAllAccounts(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an Account
     * @param {string} identifier 
     * @param {AccountUpdateAccountRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public updateAccount(identifier: string, body: AccountUpdateAccountRequest, authorization: string, options?: any) {
        return AccountServiceApiFp(this.configuration).updateAccount(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * ConfigServiceApi - fetch parameter creator
 * @export
 */
export const ConfigServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Node Config
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getConfig.');
            }
            const localVarPath = `/config`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigServiceApi - functional programming interface
 * @export
 */
export const ConfigServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Node Config
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConfigConfigData> {
            const localVarFetchArgs = ConfigServiceApiFetchParamCreator(configuration).getConfig(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConfigServiceApi - factory interface
 * @export
 */
export const ConfigServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get Node Config
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(authorization: string, options?: any) {
            return ConfigServiceApiFp(configuration).getConfig(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * ConfigServiceApi - object-oriented interface
 * @export
 * @class ConfigServiceApi
 * @extends {BaseAPI}
 */
export class ConfigServiceApi extends BaseAPI {
    /**
     * Get Node Config
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigServiceApi
     */
    public getConfig(authorization: string, options?: any) {
        return ConfigServiceApiFp(this.configuration).getConfig(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * DocumentServiceApi - fetch parameter creator
 * @export
 */
export const DocumentServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create.');
            }
            const localVarPath = `/invoice`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InvoiceInvoiceCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createDocumentProof.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocumentProof.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createDocumentProof.');
            }
            const localVarPath = `/document/{identifier}/proof`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DocumentCreateDocumentProofRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createDocumentProofForVersion.');
            }
            const localVarPath = `/document/{identifier}/{version}/proof`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DocumentCreateDocumentProofForVersionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_1(body: PurchaseorderPurchaseOrderCreatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create_1.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling create_1.');
            }
            const localVarPath = `/purchaseorder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PurchaseorderPurchaseOrderCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get.');
            }
            const localVarPath = `/invoice/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getVersion.');
            }
            const localVarPath = `/invoice/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion_2(identifier: string, version: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion_2.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion_2.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getVersion_2.');
            }
            const localVarPath = `/purchaseorder/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_3(identifier: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get_3.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling get_3.');
            }
            const localVarPath = `/purchaseorder/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update.');
            }
            const localVarPath = `/invoice/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InvoiceInvoiceUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_4(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update_4.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update_4.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling update_4.');
            }
            const localVarPath = `/purchaseorder/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PurchaseorderPurchaseOrderUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentServiceApi - functional programming interface
 * @export
 */
export const DocumentServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).create(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentDocumentProof> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).createDocumentProof(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentDocumentProof> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).createDocumentProofForVersion(identifier, version, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_1(body: PurchaseorderPurchaseOrderCreatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).create_1(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).get(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).getVersion(identifier, version, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion_2(identifier: string, version: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).getVersion_2(identifier, version, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_3(identifier: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).get_3(identifier, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).update(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_4(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).update_4(identifier, body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DocumentServiceApi - factory interface
 * @export
 */
export const DocumentServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).create(body, authorization, options)(fetch, basePath);
        },
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).createDocumentProof(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).createDocumentProofForVersion(identifier, version, body, authorization, options)(fetch, basePath);
        },
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_1(body: PurchaseorderPurchaseOrderCreatePayload, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).create_1(body, authorization, options)(fetch, basePath);
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).get(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).getVersion(identifier, version, authorization, options)(fetch, basePath);
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion_2(identifier: string, version: string, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).getVersion_2(identifier, version, authorization, options)(fetch, basePath);
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_3(identifier: string, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).get_3(identifier, authorization, options)(fetch, basePath);
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).update(identifier, body, authorization, options)(fetch, basePath);
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_4(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, authorization: string, options?: any) {
            return DocumentServiceApiFp(configuration).update_4(identifier, body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * DocumentServiceApi - object-oriented interface
 * @export
 * @class DocumentServiceApi
 * @extends {BaseAPI}
 */
export class DocumentServiceApi extends BaseAPI {
    /**
     * Creates an invoice
     * @param {InvoiceInvoiceCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public create(body: InvoiceInvoiceCreatePayload, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).create(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a list of precise proofs for the specified fields of the document given by ID
     * @param {string} identifier 
     * @param {DocumentCreateDocumentProofRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).createDocumentProof(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
     * @param {string} identifier 
     * @param {string} version 
     * @param {DocumentCreateDocumentProofForVersionRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).createDocumentProofForVersion(identifier, version, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a purchase order
     * @param {PurchaseorderPurchaseOrderCreatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public create_1(body: PurchaseorderPurchaseOrderCreatePayload, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).create_1(body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current invoice
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public get(identifier: string, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).get(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of an invoice
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public getVersion(identifier: string, version: string, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).getVersion(identifier, version, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of a purchase order
     * @param {string} identifier 
     * @param {string} version 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public getVersion_2(identifier: string, version: string, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).getVersion_2(identifier, version, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current version of a purchase order
     * @param {string} identifier 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public get_3(identifier: string, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).get_3(identifier, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an invoice
     * @param {string} identifier 
     * @param {InvoiceInvoiceUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public update(identifier: string, body: InvoiceInvoiceUpdatePayload, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).update(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Updates a purchase order
     * @param {string} identifier 
     * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public update_4(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, authorization: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).update_4(identifier, body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * HealthCheckServiceApi - fetch parameter creator
 * @export
 */
export const HealthCheckServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check for the Node
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling ping.');
            }
            const localVarPath = `/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckServiceApi - functional programming interface
 * @export
 */
export const HealthCheckServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Health check for the Node
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HealthPong> {
            const localVarFetchArgs = HealthCheckServiceApiFetchParamCreator(configuration).ping(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HealthCheckServiceApi - factory interface
 * @export
 */
export const HealthCheckServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Health check for the Node
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(authorization: string, options?: any) {
            return HealthCheckServiceApiFp(configuration).ping(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * HealthCheckServiceApi - object-oriented interface
 * @export
 * @class HealthCheckServiceApi
 * @extends {BaseAPI}
 */
export class HealthCheckServiceApi extends BaseAPI {
    /**
     * Health check for the Node
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckServiceApi
     */
    public ping(authorization: string, options?: any) {
        return HealthCheckServiceApiFp(this.configuration).ping(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * NFTServiceApi - fetch parameter creator
 * @export
 */
export const NFTServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mintNFT.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling mintNFT.');
            }
            const localVarPath = `/token/mint`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NftNFTMintRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NFTServiceApi - functional programming interface
 * @export
 */
export const NFTServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NftNFTMintResponse> {
            const localVarFetchArgs = NFTServiceApiFetchParamCreator(configuration).mintNFT(body, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NFTServiceApi - factory interface
 * @export
 */
export const NFTServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, authorization: string, options?: any) {
            return NFTServiceApiFp(configuration).mintNFT(body, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * NFTServiceApi - object-oriented interface
 * @export
 * @class NFTServiceApi
 * @extends {BaseAPI}
 */
export class NFTServiceApi extends BaseAPI {
    /**
     * Mint an NFT from a Centrifuge Document
     * @param {NftNFTMintRequest} body 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTServiceApi
     */
    public mintNFT(body: NftNFTMintRequest, authorization: string, options?: any) {
        return NFTServiceApiFp(this.configuration).mintNFT(body, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * NotificationDummyServiceApi - fetch parameter creator
 * @export
 */
export const NotificationDummyServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling notify.');
            }
            const localVarPath = `/dummy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationDummyServiceApi - functional programming interface
 * @export
 */
export const NotificationDummyServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationNotificationMessage> {
            const localVarFetchArgs = NotificationDummyServiceApiFetchParamCreator(configuration).notify(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationDummyServiceApi - factory interface
 * @export
 */
export const NotificationDummyServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Dummy notification endpoint
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(authorization: string, options?: any) {
            return NotificationDummyServiceApiFp(configuration).notify(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationDummyServiceApi - object-oriented interface
 * @export
 * @class NotificationDummyServiceApi
 * @extends {BaseAPI}
 */
export class NotificationDummyServiceApi extends BaseAPI {
    /**
     * Dummy notification endpoint
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationDummyServiceApi
     */
    public notify(authorization: string, options?: any) {
        return NotificationDummyServiceApiFp(this.configuration).notify(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * TransactionServiceApi - fetch parameter creator
 * @export
 */
export const TransactionServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Transaction Status
         * @param {string} transaction_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionStatus(transaction_id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'transaction_id' is not null or undefined
            if (transaction_id === null || transaction_id === undefined) {
                throw new RequiredError('transaction_id','Required parameter transaction_id was null or undefined when calling getTransactionStatus.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getTransactionStatus.');
            }
            const localVarPath = `/transactions/{transaction_id}`
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transaction_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionServiceApi - functional programming interface
 * @export
 */
export const TransactionServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Transaction Status
         * @param {string} transaction_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionStatus(transaction_id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionsTransactionStatusResponse> {
            const localVarFetchArgs = TransactionServiceApiFetchParamCreator(configuration).getTransactionStatus(transaction_id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TransactionServiceApi - factory interface
 * @export
 */
export const TransactionServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get Transaction Status
         * @param {string} transaction_id 
         * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionStatus(transaction_id: string, authorization: string, options?: any) {
            return TransactionServiceApiFp(configuration).getTransactionStatus(transaction_id, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * TransactionServiceApi - object-oriented interface
 * @export
 * @class TransactionServiceApi
 * @extends {BaseAPI}
 */
export class TransactionServiceApi extends BaseAPI {
    /**
     * Get Transaction Status
     * @param {string} transaction_id 
     * @param {string} authorization Hex encoded centrifuge ID of the account for the intended API action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionServiceApi
     */
    public getTransactionStatus(transaction_id: string, authorization: string, options?: any) {
        return TransactionServiceApiFp(this.configuration).getTransactionStatus(transaction_id, authorization, options)(this.fetch, this.basePath);
    }

}

